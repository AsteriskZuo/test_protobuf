// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IM_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IM_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IM_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IM_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IM_2eproto;
namespace im {
namespace citylife {
namespace proto {
class ProtoIMAppConnectParam;
class ProtoIMAppConnectParamDefaultTypeInternal;
extern ProtoIMAppConnectParamDefaultTypeInternal _ProtoIMAppConnectParam_default_instance_;
class ProtoIMAppDownloadFileInfo;
class ProtoIMAppDownloadFileInfoDefaultTypeInternal;
extern ProtoIMAppDownloadFileInfoDefaultTypeInternal _ProtoIMAppDownloadFileInfo_default_instance_;
class ProtoIMAppPushInfo;
class ProtoIMAppPushInfoDefaultTypeInternal;
extern ProtoIMAppPushInfoDefaultTypeInternal _ProtoIMAppPushInfo_default_instance_;
class ProtoIMAppRecvMessage;
class ProtoIMAppRecvMessageDefaultTypeInternal;
extern ProtoIMAppRecvMessageDefaultTypeInternal _ProtoIMAppRecvMessage_default_instance_;
class ProtoIMAppRecvMessages;
class ProtoIMAppRecvMessagesDefaultTypeInternal;
extern ProtoIMAppRecvMessagesDefaultTypeInternal _ProtoIMAppRecvMessages_default_instance_;
class ProtoIMAppSendMessage;
class ProtoIMAppSendMessageDefaultTypeInternal;
extern ProtoIMAppSendMessageDefaultTypeInternal _ProtoIMAppSendMessage_default_instance_;
class ProtoIMAppSendMessageAsyncInfo;
class ProtoIMAppSendMessageAsyncInfoDefaultTypeInternal;
extern ProtoIMAppSendMessageAsyncInfoDefaultTypeInternal _ProtoIMAppSendMessageAsyncInfo_default_instance_;
class ProtoIMBaseInfo;
class ProtoIMBaseInfoDefaultTypeInternal;
extern ProtoIMBaseInfoDefaultTypeInternal _ProtoIMBaseInfo_default_instance_;
class ProtoIMConfigInfo;
class ProtoIMConfigInfoDefaultTypeInternal;
extern ProtoIMConfigInfoDefaultTypeInternal _ProtoIMConfigInfo_default_instance_;
class ProtoIMConversation;
class ProtoIMConversationDefaultTypeInternal;
extern ProtoIMConversationDefaultTypeInternal _ProtoIMConversation_default_instance_;
class ProtoIMConversationBase;
class ProtoIMConversationBaseDefaultTypeInternal;
extern ProtoIMConversationBaseDefaultTypeInternal _ProtoIMConversationBase_default_instance_;
class ProtoIMConversations;
class ProtoIMConversationsDefaultTypeInternal;
extern ProtoIMConversationsDefaultTypeInternal _ProtoIMConversations_default_instance_;
class ProtoIMDeviceInfo;
class ProtoIMDeviceInfoDefaultTypeInternal;
extern ProtoIMDeviceInfoDefaultTypeInternal _ProtoIMDeviceInfo_default_instance_;
class ProtoIMImage;
class ProtoIMImageDefaultTypeInternal;
extern ProtoIMImageDefaultTypeInternal _ProtoIMImage_default_instance_;
class ProtoIMMessage;
class ProtoIMMessageDefaultTypeInternal;
extern ProtoIMMessageDefaultTypeInternal _ProtoIMMessage_default_instance_;
class ProtoIMMessageEx;
class ProtoIMMessageExDefaultTypeInternal;
extern ProtoIMMessageExDefaultTypeInternal _ProtoIMMessageEx_default_instance_;
class ProtoIMMessageImage;
class ProtoIMMessageImageDefaultTypeInternal;
extern ProtoIMMessageImageDefaultTypeInternal _ProtoIMMessageImage_default_instance_;
class ProtoIMMessageText;
class ProtoIMMessageTextDefaultTypeInternal;
extern ProtoIMMessageTextDefaultTypeInternal _ProtoIMMessageText_default_instance_;
class ProtoIMOfflinePushInfo;
class ProtoIMOfflinePushInfoDefaultTypeInternal;
extern ProtoIMOfflinePushInfoDefaultTypeInternal _ProtoIMOfflinePushInfo_default_instance_;
class ProtoIMSendMessage;
class ProtoIMSendMessageDefaultTypeInternal;
extern ProtoIMSendMessageDefaultTypeInternal _ProtoIMSendMessage_default_instance_;
class ProtoIMSendMessageAsyncInfo;
class ProtoIMSendMessageAsyncInfoDefaultTypeInternal;
extern ProtoIMSendMessageAsyncInfoDefaultTypeInternal _ProtoIMSendMessageAsyncInfo_default_instance_;
}  // namespace proto
}  // namespace citylife
}  // namespace im
PROTOBUF_NAMESPACE_OPEN
template<> ::im::citylife::proto::ProtoIMAppConnectParam* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMAppConnectParam>(Arena*);
template<> ::im::citylife::proto::ProtoIMAppDownloadFileInfo* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMAppDownloadFileInfo>(Arena*);
template<> ::im::citylife::proto::ProtoIMAppPushInfo* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMAppPushInfo>(Arena*);
template<> ::im::citylife::proto::ProtoIMAppRecvMessage* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMAppRecvMessage>(Arena*);
template<> ::im::citylife::proto::ProtoIMAppRecvMessages* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMAppRecvMessages>(Arena*);
template<> ::im::citylife::proto::ProtoIMAppSendMessage* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMAppSendMessage>(Arena*);
template<> ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo>(Arena*);
template<> ::im::citylife::proto::ProtoIMBaseInfo* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMBaseInfo>(Arena*);
template<> ::im::citylife::proto::ProtoIMConfigInfo* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMConfigInfo>(Arena*);
template<> ::im::citylife::proto::ProtoIMConversation* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMConversation>(Arena*);
template<> ::im::citylife::proto::ProtoIMConversationBase* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMConversationBase>(Arena*);
template<> ::im::citylife::proto::ProtoIMConversations* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMConversations>(Arena*);
template<> ::im::citylife::proto::ProtoIMDeviceInfo* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMDeviceInfo>(Arena*);
template<> ::im::citylife::proto::ProtoIMImage* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMImage>(Arena*);
template<> ::im::citylife::proto::ProtoIMMessage* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMMessage>(Arena*);
template<> ::im::citylife::proto::ProtoIMMessageEx* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMMessageEx>(Arena*);
template<> ::im::citylife::proto::ProtoIMMessageImage* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMMessageImage>(Arena*);
template<> ::im::citylife::proto::ProtoIMMessageText* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMMessageText>(Arena*);
template<> ::im::citylife::proto::ProtoIMOfflinePushInfo* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMOfflinePushInfo>(Arena*);
template<> ::im::citylife::proto::ProtoIMSendMessage* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMSendMessage>(Arena*);
template<> ::im::citylife::proto::ProtoIMSendMessageAsyncInfo* Arena::CreateMaybeMessage<::im::citylife::proto::ProtoIMSendMessageAsyncInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace im {
namespace citylife {
namespace proto {

enum ProtoIMMessageStatus : int {
  Init = 0,
  Sending = 1,
  SendSuccess = 2,
  SendFailed = 3,
  HasDeleted = 4,
  HasRevoked = 5,
  ProtoIMMessageStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProtoIMMessageStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProtoIMMessageStatus_IsValid(int value);
constexpr ProtoIMMessageStatus ProtoIMMessageStatus_MIN = Init;
constexpr ProtoIMMessageStatus ProtoIMMessageStatus_MAX = HasRevoked;
constexpr int ProtoIMMessageStatus_ARRAYSIZE = ProtoIMMessageStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoIMMessageStatus_descriptor();
template<typename T>
inline const std::string& ProtoIMMessageStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProtoIMMessageStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProtoIMMessageStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProtoIMMessageStatus_descriptor(), enum_t_value);
}
inline bool ProtoIMMessageStatus_Parse(
    const std::string& name, ProtoIMMessageStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProtoIMMessageStatus>(
    ProtoIMMessageStatus_descriptor(), name, value);
}
// ===================================================================

class ProtoIMAppConnectParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMAppConnectParam) */ {
 public:
  ProtoIMAppConnectParam();
  virtual ~ProtoIMAppConnectParam();

  ProtoIMAppConnectParam(const ProtoIMAppConnectParam& from);
  ProtoIMAppConnectParam(ProtoIMAppConnectParam&& from) noexcept
    : ProtoIMAppConnectParam() {
    *this = ::std::move(from);
  }

  inline ProtoIMAppConnectParam& operator=(const ProtoIMAppConnectParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMAppConnectParam& operator=(ProtoIMAppConnectParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMAppConnectParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMAppConnectParam* internal_default_instance() {
    return reinterpret_cast<const ProtoIMAppConnectParam*>(
               &_ProtoIMAppConnectParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtoIMAppConnectParam& a, ProtoIMAppConnectParam& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMAppConnectParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMAppConnectParam* New() const final {
    return CreateMaybeMessage<ProtoIMAppConnectParam>(nullptr);
  }

  ProtoIMAppConnectParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMAppConnectParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMAppConnectParam& from);
  void MergeFrom(const ProtoIMAppConnectParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMAppConnectParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMAppConnectParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kPackageNameFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string deviceId = 2;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string packageName = 3;
  void clear_packagename();
  const std::string& packagename() const;
  void set_packagename(const std::string& value);
  void set_packagename(std::string&& value);
  void set_packagename(const char* value);
  void set_packagename(const char* value, size_t size);
  std::string* mutable_packagename();
  std::string* release_packagename();
  void set_allocated_packagename(std::string* packagename);
  private:
  const std::string& _internal_packagename() const;
  void _internal_set_packagename(const std::string& value);
  std::string* _internal_mutable_packagename();
  public:

  // .im.citylife.proto.ProtoIMBaseInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::im::citylife::proto::ProtoIMBaseInfo& info() const;
  ::im::citylife::proto::ProtoIMBaseInfo* release_info();
  ::im::citylife::proto::ProtoIMBaseInfo* mutable_info();
  void set_allocated_info(::im::citylife::proto::ProtoIMBaseInfo* info);
  private:
  const ::im::citylife::proto::ProtoIMBaseInfo& _internal_info() const;
  ::im::citylife::proto::ProtoIMBaseInfo* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMAppConnectParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packagename_;
  ::im::citylife::proto::ProtoIMBaseInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMBaseInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMBaseInfo) */ {
 public:
  ProtoIMBaseInfo();
  virtual ~ProtoIMBaseInfo();

  ProtoIMBaseInfo(const ProtoIMBaseInfo& from);
  ProtoIMBaseInfo(ProtoIMBaseInfo&& from) noexcept
    : ProtoIMBaseInfo() {
    *this = ::std::move(from);
  }

  inline ProtoIMBaseInfo& operator=(const ProtoIMBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMBaseInfo& operator=(ProtoIMBaseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMBaseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMBaseInfo* internal_default_instance() {
    return reinterpret_cast<const ProtoIMBaseInfo*>(
               &_ProtoIMBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtoIMBaseInfo& a, ProtoIMBaseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMBaseInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMBaseInfo* New() const final {
    return CreateMaybeMessage<ProtoIMBaseInfo>(nullptr);
  }

  ProtoIMBaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMBaseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMBaseInfo& from);
  void MergeFrom(const ProtoIMBaseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMBaseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMBaseInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlatformFieldNumber = 1,
    kSdkVersionFieldNumber = 2,
    kDeviceInfoFieldNumber = 3,
  };
  // string platform = 1;
  void clear_platform();
  const std::string& platform() const;
  void set_platform(const std::string& value);
  void set_platform(std::string&& value);
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  std::string* mutable_platform();
  std::string* release_platform();
  void set_allocated_platform(std::string* platform);
  private:
  const std::string& _internal_platform() const;
  void _internal_set_platform(const std::string& value);
  std::string* _internal_mutable_platform();
  public:

  // string sdkVersion = 2;
  void clear_sdkversion();
  const std::string& sdkversion() const;
  void set_sdkversion(const std::string& value);
  void set_sdkversion(std::string&& value);
  void set_sdkversion(const char* value);
  void set_sdkversion(const char* value, size_t size);
  std::string* mutable_sdkversion();
  std::string* release_sdkversion();
  void set_allocated_sdkversion(std::string* sdkversion);
  private:
  const std::string& _internal_sdkversion() const;
  void _internal_set_sdkversion(const std::string& value);
  std::string* _internal_mutable_sdkversion();
  public:

  // .im.citylife.proto.ProtoIMDeviceInfo deviceInfo = 3;
  bool has_deviceinfo() const;
  private:
  bool _internal_has_deviceinfo() const;
  public:
  void clear_deviceinfo();
  const ::im::citylife::proto::ProtoIMDeviceInfo& deviceinfo() const;
  ::im::citylife::proto::ProtoIMDeviceInfo* release_deviceinfo();
  ::im::citylife::proto::ProtoIMDeviceInfo* mutable_deviceinfo();
  void set_allocated_deviceinfo(::im::citylife::proto::ProtoIMDeviceInfo* deviceinfo);
  private:
  const ::im::citylife::proto::ProtoIMDeviceInfo& _internal_deviceinfo() const;
  ::im::citylife::proto::ProtoIMDeviceInfo* _internal_mutable_deviceinfo();
  public:

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMBaseInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdkversion_;
  ::im::citylife::proto::ProtoIMDeviceInfo* deviceinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMDeviceInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMDeviceInfo) */ {
 public:
  ProtoIMDeviceInfo();
  virtual ~ProtoIMDeviceInfo();

  ProtoIMDeviceInfo(const ProtoIMDeviceInfo& from);
  ProtoIMDeviceInfo(ProtoIMDeviceInfo&& from) noexcept
    : ProtoIMDeviceInfo() {
    *this = ::std::move(from);
  }

  inline ProtoIMDeviceInfo& operator=(const ProtoIMDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMDeviceInfo& operator=(ProtoIMDeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMDeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const ProtoIMDeviceInfo*>(
               &_ProtoIMDeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProtoIMDeviceInfo& a, ProtoIMDeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMDeviceInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMDeviceInfo* New() const final {
    return CreateMaybeMessage<ProtoIMDeviceInfo>(nullptr);
  }

  ProtoIMDeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMDeviceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMDeviceInfo& from);
  void MergeFrom(const ProtoIMDeviceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMDeviceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMDeviceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOsNameVersionFieldNumber = 1,
    kNetworkFieldNumber = 2,
    kNetworkSpFieldNumber = 3,
  };
  // string osNameVersion = 1;
  void clear_osnameversion();
  const std::string& osnameversion() const;
  void set_osnameversion(const std::string& value);
  void set_osnameversion(std::string&& value);
  void set_osnameversion(const char* value);
  void set_osnameversion(const char* value, size_t size);
  std::string* mutable_osnameversion();
  std::string* release_osnameversion();
  void set_allocated_osnameversion(std::string* osnameversion);
  private:
  const std::string& _internal_osnameversion() const;
  void _internal_set_osnameversion(const std::string& value);
  std::string* _internal_mutable_osnameversion();
  public:

  // string network = 2;
  void clear_network();
  const std::string& network() const;
  void set_network(const std::string& value);
  void set_network(std::string&& value);
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  std::string* mutable_network();
  std::string* release_network();
  void set_allocated_network(std::string* network);
  private:
  const std::string& _internal_network() const;
  void _internal_set_network(const std::string& value);
  std::string* _internal_mutable_network();
  public:

  // string networkSp = 3;
  void clear_networksp();
  const std::string& networksp() const;
  void set_networksp(const std::string& value);
  void set_networksp(std::string&& value);
  void set_networksp(const char* value);
  void set_networksp(const char* value, size_t size);
  std::string* mutable_networksp();
  std::string* release_networksp();
  void set_allocated_networksp(std::string* networksp);
  private:
  const std::string& _internal_networksp() const;
  void _internal_set_networksp(const std::string& value);
  std::string* _internal_mutable_networksp();
  public:

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMDeviceInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osnameversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr networksp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMConfigInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMConfigInfo) */ {
 public:
  ProtoIMConfigInfo();
  virtual ~ProtoIMConfigInfo();

  ProtoIMConfigInfo(const ProtoIMConfigInfo& from);
  ProtoIMConfigInfo(ProtoIMConfigInfo&& from) noexcept
    : ProtoIMConfigInfo() {
    *this = ::std::move(from);
  }

  inline ProtoIMConfigInfo& operator=(const ProtoIMConfigInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMConfigInfo& operator=(ProtoIMConfigInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMConfigInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMConfigInfo* internal_default_instance() {
    return reinterpret_cast<const ProtoIMConfigInfo*>(
               &_ProtoIMConfigInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProtoIMConfigInfo& a, ProtoIMConfigInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMConfigInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMConfigInfo* New() const final {
    return CreateMaybeMessage<ProtoIMConfigInfo>(nullptr);
  }

  ProtoIMConfigInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMConfigInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMConfigInfo& from);
  void MergeFrom(const ProtoIMConfigInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMConfigInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMConfigInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootDirFieldNumber = 1,
    kDatabaseDirFieldNumber = 2,
    kLogDirFieldNumber = 3,
    kNaviDomainFieldNumber = 5,
    kBackgroundModeFieldNumber = 4,
    kEnableHttp2FieldNumber = 6,
    kLogLevelFieldNumber = 7,
  };
  // string rootDir = 1;
  void clear_rootdir();
  const std::string& rootdir() const;
  void set_rootdir(const std::string& value);
  void set_rootdir(std::string&& value);
  void set_rootdir(const char* value);
  void set_rootdir(const char* value, size_t size);
  std::string* mutable_rootdir();
  std::string* release_rootdir();
  void set_allocated_rootdir(std::string* rootdir);
  private:
  const std::string& _internal_rootdir() const;
  void _internal_set_rootdir(const std::string& value);
  std::string* _internal_mutable_rootdir();
  public:

  // string databaseDir = 2;
  void clear_databasedir();
  const std::string& databasedir() const;
  void set_databasedir(const std::string& value);
  void set_databasedir(std::string&& value);
  void set_databasedir(const char* value);
  void set_databasedir(const char* value, size_t size);
  std::string* mutable_databasedir();
  std::string* release_databasedir();
  void set_allocated_databasedir(std::string* databasedir);
  private:
  const std::string& _internal_databasedir() const;
  void _internal_set_databasedir(const std::string& value);
  std::string* _internal_mutable_databasedir();
  public:

  // string logDir = 3;
  void clear_logdir();
  const std::string& logdir() const;
  void set_logdir(const std::string& value);
  void set_logdir(std::string&& value);
  void set_logdir(const char* value);
  void set_logdir(const char* value, size_t size);
  std::string* mutable_logdir();
  std::string* release_logdir();
  void set_allocated_logdir(std::string* logdir);
  private:
  const std::string& _internal_logdir() const;
  void _internal_set_logdir(const std::string& value);
  std::string* _internal_mutable_logdir();
  public:

  // string naviDomain = 5;
  void clear_navidomain();
  const std::string& navidomain() const;
  void set_navidomain(const std::string& value);
  void set_navidomain(std::string&& value);
  void set_navidomain(const char* value);
  void set_navidomain(const char* value, size_t size);
  std::string* mutable_navidomain();
  std::string* release_navidomain();
  void set_allocated_navidomain(std::string* navidomain);
  private:
  const std::string& _internal_navidomain() const;
  void _internal_set_navidomain(const std::string& value);
  std::string* _internal_mutable_navidomain();
  public:

  // int32 backgroundMode = 4;
  void clear_backgroundmode();
  ::PROTOBUF_NAMESPACE_ID::int32 backgroundmode() const;
  void set_backgroundmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_backgroundmode() const;
  void _internal_set_backgroundmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool enableHttp2 = 6;
  void clear_enablehttp2();
  bool enablehttp2() const;
  void set_enablehttp2(bool value);
  private:
  bool _internal_enablehttp2() const;
  void _internal_set_enablehttp2(bool value);
  public:

  // int32 logLevel = 7;
  void clear_loglevel();
  ::PROTOBUF_NAMESPACE_ID::int32 loglevel() const;
  void set_loglevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_loglevel() const;
  void _internal_set_loglevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMConfigInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rootdir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr databasedir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logdir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr navidomain_;
  ::PROTOBUF_NAMESPACE_ID::int32 backgroundmode_;
  bool enablehttp2_;
  ::PROTOBUF_NAMESPACE_ID::int32 loglevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMAppRecvMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMAppRecvMessage) */ {
 public:
  ProtoIMAppRecvMessage();
  virtual ~ProtoIMAppRecvMessage();

  ProtoIMAppRecvMessage(const ProtoIMAppRecvMessage& from);
  ProtoIMAppRecvMessage(ProtoIMAppRecvMessage&& from) noexcept
    : ProtoIMAppRecvMessage() {
    *this = ::std::move(from);
  }

  inline ProtoIMAppRecvMessage& operator=(const ProtoIMAppRecvMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMAppRecvMessage& operator=(ProtoIMAppRecvMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMAppRecvMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMAppRecvMessage* internal_default_instance() {
    return reinterpret_cast<const ProtoIMAppRecvMessage*>(
               &_ProtoIMAppRecvMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProtoIMAppRecvMessage& a, ProtoIMAppRecvMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMAppRecvMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMAppRecvMessage* New() const final {
    return CreateMaybeMessage<ProtoIMAppRecvMessage>(nullptr);
  }

  ProtoIMAppRecvMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMAppRecvMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMAppRecvMessage& from);
  void MergeFrom(const ProtoIMAppRecvMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMAppRecvMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMAppRecvMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgTypeFieldNumber = 2,
    kFromIdFieldNumber = 3,
    kConvIdFieldNumber = 4,
    kContentFieldNumber = 5,
    kMsgIdFieldNumber = 6,
    kTimestampFieldNumber = 7,
    kConvTypeFieldNumber = 1,
  };
  // string msgType = 2;
  void clear_msgtype();
  const std::string& msgtype() const;
  void set_msgtype(const std::string& value);
  void set_msgtype(std::string&& value);
  void set_msgtype(const char* value);
  void set_msgtype(const char* value, size_t size);
  std::string* mutable_msgtype();
  std::string* release_msgtype();
  void set_allocated_msgtype(std::string* msgtype);
  private:
  const std::string& _internal_msgtype() const;
  void _internal_set_msgtype(const std::string& value);
  std::string* _internal_mutable_msgtype();
  public:

  // string fromId = 3;
  void clear_fromid();
  const std::string& fromid() const;
  void set_fromid(const std::string& value);
  void set_fromid(std::string&& value);
  void set_fromid(const char* value);
  void set_fromid(const char* value, size_t size);
  std::string* mutable_fromid();
  std::string* release_fromid();
  void set_allocated_fromid(std::string* fromid);
  private:
  const std::string& _internal_fromid() const;
  void _internal_set_fromid(const std::string& value);
  std::string* _internal_mutable_fromid();
  public:

  // string convId = 4;
  void clear_convid();
  const std::string& convid() const;
  void set_convid(const std::string& value);
  void set_convid(std::string&& value);
  void set_convid(const char* value);
  void set_convid(const char* value, size_t size);
  std::string* mutable_convid();
  std::string* release_convid();
  void set_allocated_convid(std::string* convid);
  private:
  const std::string& _internal_convid() const;
  void _internal_set_convid(const std::string& value);
  std::string* _internal_mutable_convid();
  public:

  // string content = 5;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string msgId = 6;
  void clear_msgid();
  const std::string& msgid() const;
  void set_msgid(const std::string& value);
  void set_msgid(std::string&& value);
  void set_msgid(const char* value);
  void set_msgid(const char* value, size_t size);
  std::string* mutable_msgid();
  std::string* release_msgid();
  void set_allocated_msgid(std::string* msgid);
  private:
  const std::string& _internal_msgid() const;
  void _internal_set_msgid(const std::string& value);
  std::string* _internal_mutable_msgid();
  public:

  // int64 timestamp = 7;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 convType = 1;
  void clear_convtype();
  ::PROTOBUF_NAMESPACE_ID::int32 convtype() const;
  void set_convtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_convtype() const;
  void _internal_set_convtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMAppRecvMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fromid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr convid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgid_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 convtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMAppRecvMessages :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMAppRecvMessages) */ {
 public:
  ProtoIMAppRecvMessages();
  virtual ~ProtoIMAppRecvMessages();

  ProtoIMAppRecvMessages(const ProtoIMAppRecvMessages& from);
  ProtoIMAppRecvMessages(ProtoIMAppRecvMessages&& from) noexcept
    : ProtoIMAppRecvMessages() {
    *this = ::std::move(from);
  }

  inline ProtoIMAppRecvMessages& operator=(const ProtoIMAppRecvMessages& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMAppRecvMessages& operator=(ProtoIMAppRecvMessages&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMAppRecvMessages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMAppRecvMessages* internal_default_instance() {
    return reinterpret_cast<const ProtoIMAppRecvMessages*>(
               &_ProtoIMAppRecvMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProtoIMAppRecvMessages& a, ProtoIMAppRecvMessages& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMAppRecvMessages* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMAppRecvMessages* New() const final {
    return CreateMaybeMessage<ProtoIMAppRecvMessages>(nullptr);
  }

  ProtoIMAppRecvMessages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMAppRecvMessages>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMAppRecvMessages& from);
  void MergeFrom(const ProtoIMAppRecvMessages& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMAppRecvMessages* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMAppRecvMessages";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 1,
  };
  // repeated .im.citylife.proto.ProtoIMAppRecvMessage msgs = 1;
  int msgs_size() const;
  private:
  int _internal_msgs_size() const;
  public:
  void clear_msgs();
  ::im::citylife::proto::ProtoIMAppRecvMessage* mutable_msgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::citylife::proto::ProtoIMAppRecvMessage >*
      mutable_msgs();
  private:
  const ::im::citylife::proto::ProtoIMAppRecvMessage& _internal_msgs(int index) const;
  ::im::citylife::proto::ProtoIMAppRecvMessage* _internal_add_msgs();
  public:
  const ::im::citylife::proto::ProtoIMAppRecvMessage& msgs(int index) const;
  ::im::citylife::proto::ProtoIMAppRecvMessage* add_msgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::citylife::proto::ProtoIMAppRecvMessage >&
      msgs() const;

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMAppRecvMessages)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::citylife::proto::ProtoIMAppRecvMessage > msgs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMAppSendMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMAppSendMessage) */ {
 public:
  ProtoIMAppSendMessage();
  virtual ~ProtoIMAppSendMessage();

  ProtoIMAppSendMessage(const ProtoIMAppSendMessage& from);
  ProtoIMAppSendMessage(ProtoIMAppSendMessage&& from) noexcept
    : ProtoIMAppSendMessage() {
    *this = ::std::move(from);
  }

  inline ProtoIMAppSendMessage& operator=(const ProtoIMAppSendMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMAppSendMessage& operator=(ProtoIMAppSendMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMAppSendMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMAppSendMessage* internal_default_instance() {
    return reinterpret_cast<const ProtoIMAppSendMessage*>(
               &_ProtoIMAppSendMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProtoIMAppSendMessage& a, ProtoIMAppSendMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMAppSendMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMAppSendMessage* New() const final {
    return CreateMaybeMessage<ProtoIMAppSendMessage>(nullptr);
  }

  ProtoIMAppSendMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMAppSendMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMAppSendMessage& from);
  void MergeFrom(const ProtoIMAppSendMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMAppSendMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMAppSendMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kTypeFieldNumber = 2,
    kContentFieldNumber = 3,
    kPushInfoFieldNumber = 4,
    kAsyncInfoFieldNumber = 5,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string content = 3;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .im.citylife.proto.ProtoIMAppPushInfo pushInfo = 4;
  bool has_pushinfo() const;
  private:
  bool _internal_has_pushinfo() const;
  public:
  void clear_pushinfo();
  const ::im::citylife::proto::ProtoIMAppPushInfo& pushinfo() const;
  ::im::citylife::proto::ProtoIMAppPushInfo* release_pushinfo();
  ::im::citylife::proto::ProtoIMAppPushInfo* mutable_pushinfo();
  void set_allocated_pushinfo(::im::citylife::proto::ProtoIMAppPushInfo* pushinfo);
  private:
  const ::im::citylife::proto::ProtoIMAppPushInfo& _internal_pushinfo() const;
  ::im::citylife::proto::ProtoIMAppPushInfo* _internal_mutable_pushinfo();
  public:

  // .im.citylife.proto.ProtoIMAppSendMessageAsyncInfo asyncInfo = 5;
  bool has_asyncinfo() const;
  private:
  bool _internal_has_asyncinfo() const;
  public:
  void clear_asyncinfo();
  const ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo& asyncinfo() const;
  ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* release_asyncinfo();
  ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* mutable_asyncinfo();
  void set_allocated_asyncinfo(::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* asyncinfo);
  private:
  const ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo& _internal_asyncinfo() const;
  ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* _internal_mutable_asyncinfo();
  public:

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMAppSendMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::im::citylife::proto::ProtoIMAppPushInfo* pushinfo_;
  ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* asyncinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMAppPushInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMAppPushInfo) */ {
 public:
  ProtoIMAppPushInfo();
  virtual ~ProtoIMAppPushInfo();

  ProtoIMAppPushInfo(const ProtoIMAppPushInfo& from);
  ProtoIMAppPushInfo(ProtoIMAppPushInfo&& from) noexcept
    : ProtoIMAppPushInfo() {
    *this = ::std::move(from);
  }

  inline ProtoIMAppPushInfo& operator=(const ProtoIMAppPushInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMAppPushInfo& operator=(ProtoIMAppPushInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMAppPushInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMAppPushInfo* internal_default_instance() {
    return reinterpret_cast<const ProtoIMAppPushInfo*>(
               &_ProtoIMAppPushInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ProtoIMAppPushInfo& a, ProtoIMAppPushInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMAppPushInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMAppPushInfo* New() const final {
    return CreateMaybeMessage<ProtoIMAppPushInfo>(nullptr);
  }

  ProtoIMAppPushInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMAppPushInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMAppPushInfo& from);
  void MergeFrom(const ProtoIMAppPushInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMAppPushInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMAppPushInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPushContentFieldNumber = 1,
    kPushDataFieldNumber = 2,
    kPushTitleFieldNumber = 3,
    kPushSubtitleFieldNumber = 4,
    kPushSoundFieldNumber = 5,
  };
  // string pushContent = 1;
  void clear_pushcontent();
  const std::string& pushcontent() const;
  void set_pushcontent(const std::string& value);
  void set_pushcontent(std::string&& value);
  void set_pushcontent(const char* value);
  void set_pushcontent(const char* value, size_t size);
  std::string* mutable_pushcontent();
  std::string* release_pushcontent();
  void set_allocated_pushcontent(std::string* pushcontent);
  private:
  const std::string& _internal_pushcontent() const;
  void _internal_set_pushcontent(const std::string& value);
  std::string* _internal_mutable_pushcontent();
  public:

  // string pushData = 2;
  void clear_pushdata();
  const std::string& pushdata() const;
  void set_pushdata(const std::string& value);
  void set_pushdata(std::string&& value);
  void set_pushdata(const char* value);
  void set_pushdata(const char* value, size_t size);
  std::string* mutable_pushdata();
  std::string* release_pushdata();
  void set_allocated_pushdata(std::string* pushdata);
  private:
  const std::string& _internal_pushdata() const;
  void _internal_set_pushdata(const std::string& value);
  std::string* _internal_mutable_pushdata();
  public:

  // string pushTitle = 3;
  void clear_pushtitle();
  const std::string& pushtitle() const;
  void set_pushtitle(const std::string& value);
  void set_pushtitle(std::string&& value);
  void set_pushtitle(const char* value);
  void set_pushtitle(const char* value, size_t size);
  std::string* mutable_pushtitle();
  std::string* release_pushtitle();
  void set_allocated_pushtitle(std::string* pushtitle);
  private:
  const std::string& _internal_pushtitle() const;
  void _internal_set_pushtitle(const std::string& value);
  std::string* _internal_mutable_pushtitle();
  public:

  // string pushSubtitle = 4;
  void clear_pushsubtitle();
  const std::string& pushsubtitle() const;
  void set_pushsubtitle(const std::string& value);
  void set_pushsubtitle(std::string&& value);
  void set_pushsubtitle(const char* value);
  void set_pushsubtitle(const char* value, size_t size);
  std::string* mutable_pushsubtitle();
  std::string* release_pushsubtitle();
  void set_allocated_pushsubtitle(std::string* pushsubtitle);
  private:
  const std::string& _internal_pushsubtitle() const;
  void _internal_set_pushsubtitle(const std::string& value);
  std::string* _internal_mutable_pushsubtitle();
  public:

  // string pushSound = 5;
  void clear_pushsound();
  const std::string& pushsound() const;
  void set_pushsound(const std::string& value);
  void set_pushsound(std::string&& value);
  void set_pushsound(const char* value);
  void set_pushsound(const char* value, size_t size);
  std::string* mutable_pushsound();
  std::string* release_pushsound();
  void set_allocated_pushsound(std::string* pushsound);
  private:
  const std::string& _internal_pushsound() const;
  void _internal_set_pushsound(const std::string& value);
  std::string* _internal_mutable_pushsound();
  public:

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMAppPushInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pushcontent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pushdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pushtitle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pushsubtitle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pushsound_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMAppSendMessageAsyncInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo) */ {
 public:
  ProtoIMAppSendMessageAsyncInfo();
  virtual ~ProtoIMAppSendMessageAsyncInfo();

  ProtoIMAppSendMessageAsyncInfo(const ProtoIMAppSendMessageAsyncInfo& from);
  ProtoIMAppSendMessageAsyncInfo(ProtoIMAppSendMessageAsyncInfo&& from) noexcept
    : ProtoIMAppSendMessageAsyncInfo() {
    *this = ::std::move(from);
  }

  inline ProtoIMAppSendMessageAsyncInfo& operator=(const ProtoIMAppSendMessageAsyncInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMAppSendMessageAsyncInfo& operator=(ProtoIMAppSendMessageAsyncInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMAppSendMessageAsyncInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMAppSendMessageAsyncInfo* internal_default_instance() {
    return reinterpret_cast<const ProtoIMAppSendMessageAsyncInfo*>(
               &_ProtoIMAppSendMessageAsyncInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ProtoIMAppSendMessageAsyncInfo& a, ProtoIMAppSendMessageAsyncInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMAppSendMessageAsyncInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMAppSendMessageAsyncInfo* New() const final {
    return CreateMaybeMessage<ProtoIMAppSendMessageAsyncInfo>(nullptr);
  }

  ProtoIMAppSendMessageAsyncInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMAppSendMessageAsyncInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMAppSendMessageAsyncInfo& from);
  void MergeFrom(const ProtoIMAppSendMessageAsyncInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMAppSendMessageAsyncInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMAppSendMessageAsyncInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kLocalPathFieldNumber = 2,
    kServerUrlFieldNumber = 3,
    kFileTypeFieldNumber = 4,
    kTimestampFieldNumber = 5,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string localPath = 2;
  void clear_localpath();
  const std::string& localpath() const;
  void set_localpath(const std::string& value);
  void set_localpath(std::string&& value);
  void set_localpath(const char* value);
  void set_localpath(const char* value, size_t size);
  std::string* mutable_localpath();
  std::string* release_localpath();
  void set_allocated_localpath(std::string* localpath);
  private:
  const std::string& _internal_localpath() const;
  void _internal_set_localpath(const std::string& value);
  std::string* _internal_mutable_localpath();
  public:

  // string serverUrl = 3;
  void clear_serverurl();
  const std::string& serverurl() const;
  void set_serverurl(const std::string& value);
  void set_serverurl(std::string&& value);
  void set_serverurl(const char* value);
  void set_serverurl(const char* value, size_t size);
  std::string* mutable_serverurl();
  std::string* release_serverurl();
  void set_allocated_serverurl(std::string* serverurl);
  private:
  const std::string& _internal_serverurl() const;
  void _internal_set_serverurl(const std::string& value);
  std::string* _internal_mutable_serverurl();
  public:

  // string fileType = 4;
  void clear_filetype();
  const std::string& filetype() const;
  void set_filetype(const std::string& value);
  void set_filetype(std::string&& value);
  void set_filetype(const char* value);
  void set_filetype(const char* value, size_t size);
  std::string* mutable_filetype();
  std::string* release_filetype();
  void set_allocated_filetype(std::string* filetype);
  private:
  const std::string& _internal_filetype() const;
  void _internal_set_filetype(const std::string& value);
  std::string* _internal_mutable_filetype();
  public:

  // int64 timestamp = 5;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filetype_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMAppDownloadFileInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMAppDownloadFileInfo) */ {
 public:
  ProtoIMAppDownloadFileInfo();
  virtual ~ProtoIMAppDownloadFileInfo();

  ProtoIMAppDownloadFileInfo(const ProtoIMAppDownloadFileInfo& from);
  ProtoIMAppDownloadFileInfo(ProtoIMAppDownloadFileInfo&& from) noexcept
    : ProtoIMAppDownloadFileInfo() {
    *this = ::std::move(from);
  }

  inline ProtoIMAppDownloadFileInfo& operator=(const ProtoIMAppDownloadFileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMAppDownloadFileInfo& operator=(ProtoIMAppDownloadFileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMAppDownloadFileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMAppDownloadFileInfo* internal_default_instance() {
    return reinterpret_cast<const ProtoIMAppDownloadFileInfo*>(
               &_ProtoIMAppDownloadFileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ProtoIMAppDownloadFileInfo& a, ProtoIMAppDownloadFileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMAppDownloadFileInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMAppDownloadFileInfo* New() const final {
    return CreateMaybeMessage<ProtoIMAppDownloadFileInfo>(nullptr);
  }

  ProtoIMAppDownloadFileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMAppDownloadFileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMAppDownloadFileInfo& from);
  void MergeFrom(const ProtoIMAppDownloadFileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMAppDownloadFileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMAppDownloadFileInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 1,
    kSenderIdFieldNumber = 2,
    kFileIdFieldNumber = 3,
    kLocalPathFieldNumber = 4,
    kUrlFieldNumber = 5,
    kFileTypeFieldNumber = 6,
    kTimestampFieldNumber = 7,
  };
  // string msgId = 1;
  void clear_msgid();
  const std::string& msgid() const;
  void set_msgid(const std::string& value);
  void set_msgid(std::string&& value);
  void set_msgid(const char* value);
  void set_msgid(const char* value, size_t size);
  std::string* mutable_msgid();
  std::string* release_msgid();
  void set_allocated_msgid(std::string* msgid);
  private:
  const std::string& _internal_msgid() const;
  void _internal_set_msgid(const std::string& value);
  std::string* _internal_mutable_msgid();
  public:

  // string senderId = 2;
  void clear_senderid();
  const std::string& senderid() const;
  void set_senderid(const std::string& value);
  void set_senderid(std::string&& value);
  void set_senderid(const char* value);
  void set_senderid(const char* value, size_t size);
  std::string* mutable_senderid();
  std::string* release_senderid();
  void set_allocated_senderid(std::string* senderid);
  private:
  const std::string& _internal_senderid() const;
  void _internal_set_senderid(const std::string& value);
  std::string* _internal_mutable_senderid();
  public:

  // string fileId = 3;
  void clear_fileid();
  const std::string& fileid() const;
  void set_fileid(const std::string& value);
  void set_fileid(std::string&& value);
  void set_fileid(const char* value);
  void set_fileid(const char* value, size_t size);
  std::string* mutable_fileid();
  std::string* release_fileid();
  void set_allocated_fileid(std::string* fileid);
  private:
  const std::string& _internal_fileid() const;
  void _internal_set_fileid(const std::string& value);
  std::string* _internal_mutable_fileid();
  public:

  // string localPath = 4;
  void clear_localpath();
  const std::string& localpath() const;
  void set_localpath(const std::string& value);
  void set_localpath(std::string&& value);
  void set_localpath(const char* value);
  void set_localpath(const char* value, size_t size);
  std::string* mutable_localpath();
  std::string* release_localpath();
  void set_allocated_localpath(std::string* localpath);
  private:
  const std::string& _internal_localpath() const;
  void _internal_set_localpath(const std::string& value);
  std::string* _internal_mutable_localpath();
  public:

  // string url = 5;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string fileType = 6;
  void clear_filetype();
  const std::string& filetype() const;
  void set_filetype(const std::string& value);
  void set_filetype(std::string&& value);
  void set_filetype(const char* value);
  void set_filetype(const char* value, size_t size);
  std::string* mutable_filetype();
  std::string* release_filetype();
  void set_allocated_filetype(std::string* filetype);
  private:
  const std::string& _internal_filetype() const;
  void _internal_set_filetype(const std::string& value);
  std::string* _internal_mutable_filetype();
  public:

  // int64 timestamp = 7;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMAppDownloadFileInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr senderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fileid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filetype_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMOfflinePushInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMOfflinePushInfo) */ {
 public:
  ProtoIMOfflinePushInfo();
  virtual ~ProtoIMOfflinePushInfo();

  ProtoIMOfflinePushInfo(const ProtoIMOfflinePushInfo& from);
  ProtoIMOfflinePushInfo(ProtoIMOfflinePushInfo&& from) noexcept
    : ProtoIMOfflinePushInfo() {
    *this = ::std::move(from);
  }

  inline ProtoIMOfflinePushInfo& operator=(const ProtoIMOfflinePushInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMOfflinePushInfo& operator=(ProtoIMOfflinePushInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMOfflinePushInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMOfflinePushInfo* internal_default_instance() {
    return reinterpret_cast<const ProtoIMOfflinePushInfo*>(
               &_ProtoIMOfflinePushInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ProtoIMOfflinePushInfo& a, ProtoIMOfflinePushInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMOfflinePushInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMOfflinePushInfo* New() const final {
    return CreateMaybeMessage<ProtoIMOfflinePushInfo>(nullptr);
  }

  ProtoIMOfflinePushInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMOfflinePushInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMOfflinePushInfo& from);
  void MergeFrom(const ProtoIMOfflinePushInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMOfflinePushInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMOfflinePushInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPushcontentFieldNumber = 1,
    kPushdataFieldNumber = 2,
    kPushtitleFieldNumber = 3,
    kPushsubtitleFieldNumber = 4,
    kPushsoundFieldNumber = 5,
  };
  // string pushcontent = 1;
  void clear_pushcontent();
  const std::string& pushcontent() const;
  void set_pushcontent(const std::string& value);
  void set_pushcontent(std::string&& value);
  void set_pushcontent(const char* value);
  void set_pushcontent(const char* value, size_t size);
  std::string* mutable_pushcontent();
  std::string* release_pushcontent();
  void set_allocated_pushcontent(std::string* pushcontent);
  private:
  const std::string& _internal_pushcontent() const;
  void _internal_set_pushcontent(const std::string& value);
  std::string* _internal_mutable_pushcontent();
  public:

  // string pushdata = 2;
  void clear_pushdata();
  const std::string& pushdata() const;
  void set_pushdata(const std::string& value);
  void set_pushdata(std::string&& value);
  void set_pushdata(const char* value);
  void set_pushdata(const char* value, size_t size);
  std::string* mutable_pushdata();
  std::string* release_pushdata();
  void set_allocated_pushdata(std::string* pushdata);
  private:
  const std::string& _internal_pushdata() const;
  void _internal_set_pushdata(const std::string& value);
  std::string* _internal_mutable_pushdata();
  public:

  // string pushtitle = 3;
  void clear_pushtitle();
  const std::string& pushtitle() const;
  void set_pushtitle(const std::string& value);
  void set_pushtitle(std::string&& value);
  void set_pushtitle(const char* value);
  void set_pushtitle(const char* value, size_t size);
  std::string* mutable_pushtitle();
  std::string* release_pushtitle();
  void set_allocated_pushtitle(std::string* pushtitle);
  private:
  const std::string& _internal_pushtitle() const;
  void _internal_set_pushtitle(const std::string& value);
  std::string* _internal_mutable_pushtitle();
  public:

  // string pushsubtitle = 4;
  void clear_pushsubtitle();
  const std::string& pushsubtitle() const;
  void set_pushsubtitle(const std::string& value);
  void set_pushsubtitle(std::string&& value);
  void set_pushsubtitle(const char* value);
  void set_pushsubtitle(const char* value, size_t size);
  std::string* mutable_pushsubtitle();
  std::string* release_pushsubtitle();
  void set_allocated_pushsubtitle(std::string* pushsubtitle);
  private:
  const std::string& _internal_pushsubtitle() const;
  void _internal_set_pushsubtitle(const std::string& value);
  std::string* _internal_mutable_pushsubtitle();
  public:

  // string pushsound = 5;
  void clear_pushsound();
  const std::string& pushsound() const;
  void set_pushsound(const std::string& value);
  void set_pushsound(std::string&& value);
  void set_pushsound(const char* value);
  void set_pushsound(const char* value, size_t size);
  std::string* mutable_pushsound();
  std::string* release_pushsound();
  void set_allocated_pushsound(std::string* pushsound);
  private:
  const std::string& _internal_pushsound() const;
  void _internal_set_pushsound(const std::string& value);
  std::string* _internal_mutable_pushsound();
  public:

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMOfflinePushInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pushcontent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pushdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pushtitle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pushsubtitle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pushsound_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMSendMessageAsyncInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMSendMessageAsyncInfo) */ {
 public:
  ProtoIMSendMessageAsyncInfo();
  virtual ~ProtoIMSendMessageAsyncInfo();

  ProtoIMSendMessageAsyncInfo(const ProtoIMSendMessageAsyncInfo& from);
  ProtoIMSendMessageAsyncInfo(ProtoIMSendMessageAsyncInfo&& from) noexcept
    : ProtoIMSendMessageAsyncInfo() {
    *this = ::std::move(from);
  }

  inline ProtoIMSendMessageAsyncInfo& operator=(const ProtoIMSendMessageAsyncInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMSendMessageAsyncInfo& operator=(ProtoIMSendMessageAsyncInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMSendMessageAsyncInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMSendMessageAsyncInfo* internal_default_instance() {
    return reinterpret_cast<const ProtoIMSendMessageAsyncInfo*>(
               &_ProtoIMSendMessageAsyncInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ProtoIMSendMessageAsyncInfo& a, ProtoIMSendMessageAsyncInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMSendMessageAsyncInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMSendMessageAsyncInfo* New() const final {
    return CreateMaybeMessage<ProtoIMSendMessageAsyncInfo>(nullptr);
  }

  ProtoIMSendMessageAsyncInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMSendMessageAsyncInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMSendMessageAsyncInfo& from);
  void MergeFrom(const ProtoIMSendMessageAsyncInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMSendMessageAsyncInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMSendMessageAsyncInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kLocalPathFieldNumber = 2,
    kUrlFieldNumber = 3,
    kFileTypeFieldNumber = 4,
    kTimestampFieldNumber = 5,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string local_path = 2;
  void clear_local_path();
  const std::string& local_path() const;
  void set_local_path(const std::string& value);
  void set_local_path(std::string&& value);
  void set_local_path(const char* value);
  void set_local_path(const char* value, size_t size);
  std::string* mutable_local_path();
  std::string* release_local_path();
  void set_allocated_local_path(std::string* local_path);
  private:
  const std::string& _internal_local_path() const;
  void _internal_set_local_path(const std::string& value);
  std::string* _internal_mutable_local_path();
  public:

  // string url = 3;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string file_type = 4;
  void clear_file_type();
  const std::string& file_type() const;
  void set_file_type(const std::string& value);
  void set_file_type(std::string&& value);
  void set_file_type(const char* value);
  void set_file_type(const char* value, size_t size);
  std::string* mutable_file_type();
  std::string* release_file_type();
  void set_allocated_file_type(std::string* file_type);
  private:
  const std::string& _internal_file_type() const;
  void _internal_set_file_type(const std::string& value);
  std::string* _internal_mutable_file_type();
  public:

  // int64 timestamp = 5;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMSendMessageAsyncInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMSendMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMSendMessage) */ {
 public:
  ProtoIMSendMessage();
  virtual ~ProtoIMSendMessage();

  ProtoIMSendMessage(const ProtoIMSendMessage& from);
  ProtoIMSendMessage(ProtoIMSendMessage&& from) noexcept
    : ProtoIMSendMessage() {
    *this = ::std::move(from);
  }

  inline ProtoIMSendMessage& operator=(const ProtoIMSendMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMSendMessage& operator=(ProtoIMSendMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMSendMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMSendMessage* internal_default_instance() {
    return reinterpret_cast<const ProtoIMSendMessage*>(
               &_ProtoIMSendMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ProtoIMSendMessage& a, ProtoIMSendMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMSendMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMSendMessage* New() const final {
    return CreateMaybeMessage<ProtoIMSendMessage>(nullptr);
  }

  ProtoIMSendMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMSendMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMSendMessage& from);
  void MergeFrom(const ProtoIMSendMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMSendMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMSendMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kAsyncInfoFieldNumber = 2,
    kMsgPushInfoFieldNumber = 3,
  };
  // .im.citylife.proto.ProtoIMMessage message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::im::citylife::proto::ProtoIMMessage& message() const;
  ::im::citylife::proto::ProtoIMMessage* release_message();
  ::im::citylife::proto::ProtoIMMessage* mutable_message();
  void set_allocated_message(::im::citylife::proto::ProtoIMMessage* message);
  private:
  const ::im::citylife::proto::ProtoIMMessage& _internal_message() const;
  ::im::citylife::proto::ProtoIMMessage* _internal_mutable_message();
  public:

  // .im.citylife.proto.ProtoIMAppSendMessageAsyncInfo async_info = 2;
  bool has_async_info() const;
  private:
  bool _internal_has_async_info() const;
  public:
  void clear_async_info();
  const ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo& async_info() const;
  ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* release_async_info();
  ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* mutable_async_info();
  void set_allocated_async_info(::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* async_info);
  private:
  const ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo& _internal_async_info() const;
  ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* _internal_mutable_async_info();
  public:

  // .im.citylife.proto.ProtoIMOfflinePushInfo msg_push_info = 3;
  bool has_msg_push_info() const;
  private:
  bool _internal_has_msg_push_info() const;
  public:
  void clear_msg_push_info();
  const ::im::citylife::proto::ProtoIMOfflinePushInfo& msg_push_info() const;
  ::im::citylife::proto::ProtoIMOfflinePushInfo* release_msg_push_info();
  ::im::citylife::proto::ProtoIMOfflinePushInfo* mutable_msg_push_info();
  void set_allocated_msg_push_info(::im::citylife::proto::ProtoIMOfflinePushInfo* msg_push_info);
  private:
  const ::im::citylife::proto::ProtoIMOfflinePushInfo& _internal_msg_push_info() const;
  ::im::citylife::proto::ProtoIMOfflinePushInfo* _internal_mutable_msg_push_info();
  public:

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMSendMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::im::citylife::proto::ProtoIMMessage* message_;
  ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* async_info_;
  ::im::citylife::proto::ProtoIMOfflinePushInfo* msg_push_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMMessage) */ {
 public:
  ProtoIMMessage();
  virtual ~ProtoIMMessage();

  ProtoIMMessage(const ProtoIMMessage& from);
  ProtoIMMessage(ProtoIMMessage&& from) noexcept
    : ProtoIMMessage() {
    *this = ::std::move(from);
  }

  inline ProtoIMMessage& operator=(const ProtoIMMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMMessage& operator=(ProtoIMMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMMessage* internal_default_instance() {
    return reinterpret_cast<const ProtoIMMessage*>(
               &_ProtoIMMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ProtoIMMessage& a, ProtoIMMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMMessage* New() const final {
    return CreateMaybeMessage<ProtoIMMessage>(nullptr);
  }

  ProtoIMMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMMessage& from);
  void MergeFrom(const ProtoIMMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgUuidFieldNumber = 1,
    kMsgTypeFieldNumber = 2,
    kSenderFieldNumber = 4,
    kReceiverFieldNumber = 5,
    kMsgContentFieldNumber = 6,
    kIsSendFieldNumber = 3,
    kMsgStatusFieldNumber = 8,
    kTimestampFieldNumber = 7,
  };
  // string msg_uuid = 1;
  void clear_msg_uuid();
  const std::string& msg_uuid() const;
  void set_msg_uuid(const std::string& value);
  void set_msg_uuid(std::string&& value);
  void set_msg_uuid(const char* value);
  void set_msg_uuid(const char* value, size_t size);
  std::string* mutable_msg_uuid();
  std::string* release_msg_uuid();
  void set_allocated_msg_uuid(std::string* msg_uuid);
  private:
  const std::string& _internal_msg_uuid() const;
  void _internal_set_msg_uuid(const std::string& value);
  std::string* _internal_mutable_msg_uuid();
  public:

  // string msg_type = 2;
  void clear_msg_type();
  const std::string& msg_type() const;
  void set_msg_type(const std::string& value);
  void set_msg_type(std::string&& value);
  void set_msg_type(const char* value);
  void set_msg_type(const char* value, size_t size);
  std::string* mutable_msg_type();
  std::string* release_msg_type();
  void set_allocated_msg_type(std::string* msg_type);
  private:
  const std::string& _internal_msg_type() const;
  void _internal_set_msg_type(const std::string& value);
  std::string* _internal_mutable_msg_type();
  public:

  // string sender = 4;
  void clear_sender();
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string receiver = 5;
  void clear_receiver();
  const std::string& receiver() const;
  void set_receiver(const std::string& value);
  void set_receiver(std::string&& value);
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  std::string* mutable_receiver();
  std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);
  private:
  const std::string& _internal_receiver() const;
  void _internal_set_receiver(const std::string& value);
  std::string* _internal_mutable_receiver();
  public:

  // string msg_content = 6;
  void clear_msg_content();
  const std::string& msg_content() const;
  void set_msg_content(const std::string& value);
  void set_msg_content(std::string&& value);
  void set_msg_content(const char* value);
  void set_msg_content(const char* value, size_t size);
  std::string* mutable_msg_content();
  std::string* release_msg_content();
  void set_allocated_msg_content(std::string* msg_content);
  private:
  const std::string& _internal_msg_content() const;
  void _internal_set_msg_content(const std::string& value);
  std::string* _internal_mutable_msg_content();
  public:

  // bool isSend = 3;
  void clear_issend();
  bool issend() const;
  void set_issend(bool value);
  private:
  bool _internal_issend() const;
  void _internal_set_issend(bool value);
  public:

  // .im.citylife.proto.ProtoIMMessageStatus msg_status = 8;
  void clear_msg_status();
  ::im::citylife::proto::ProtoIMMessageStatus msg_status() const;
  void set_msg_status(::im::citylife::proto::ProtoIMMessageStatus value);
  private:
  ::im::citylife::proto::ProtoIMMessageStatus _internal_msg_status() const;
  void _internal_set_msg_status(::im::citylife::proto::ProtoIMMessageStatus value);
  public:

  // int64 timestamp = 7;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_content_;
  bool issend_;
  int msg_status_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMConversation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMConversation) */ {
 public:
  ProtoIMConversation();
  virtual ~ProtoIMConversation();

  ProtoIMConversation(const ProtoIMConversation& from);
  ProtoIMConversation(ProtoIMConversation&& from) noexcept
    : ProtoIMConversation() {
    *this = ::std::move(from);
  }

  inline ProtoIMConversation& operator=(const ProtoIMConversation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMConversation& operator=(ProtoIMConversation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMConversation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMConversation* internal_default_instance() {
    return reinterpret_cast<const ProtoIMConversation*>(
               &_ProtoIMConversation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ProtoIMConversation& a, ProtoIMConversation& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMConversation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMConversation* New() const final {
    return CreateMaybeMessage<ProtoIMConversation>(nullptr);
  }

  ProtoIMConversation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMConversation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMConversation& from);
  void MergeFrom(const ProtoIMConversation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMConversation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMConversation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConvIdFieldNumber = 1,
    kSnapshotFieldNumber = 4,
    kLastMsgUuidFieldNumber = 5,
    kLastReadedMsgUuidFieldNumber = 6,
    kLastMsgFieldNumber = 9,
    kTimestampFieldNumber = 3,
    kConvTypeFieldNumber = 2,
    kUnreadCountFieldNumber = 8,
    kLastReadedMsgTimestampFieldNumber = 7,
  };
  // string conv_id = 1;
  void clear_conv_id();
  const std::string& conv_id() const;
  void set_conv_id(const std::string& value);
  void set_conv_id(std::string&& value);
  void set_conv_id(const char* value);
  void set_conv_id(const char* value, size_t size);
  std::string* mutable_conv_id();
  std::string* release_conv_id();
  void set_allocated_conv_id(std::string* conv_id);
  private:
  const std::string& _internal_conv_id() const;
  void _internal_set_conv_id(const std::string& value);
  std::string* _internal_mutable_conv_id();
  public:

  // string snapshot = 4;
  void clear_snapshot();
  const std::string& snapshot() const;
  void set_snapshot(const std::string& value);
  void set_snapshot(std::string&& value);
  void set_snapshot(const char* value);
  void set_snapshot(const char* value, size_t size);
  std::string* mutable_snapshot();
  std::string* release_snapshot();
  void set_allocated_snapshot(std::string* snapshot);
  private:
  const std::string& _internal_snapshot() const;
  void _internal_set_snapshot(const std::string& value);
  std::string* _internal_mutable_snapshot();
  public:

  // string last_msg_uuid = 5;
  void clear_last_msg_uuid();
  const std::string& last_msg_uuid() const;
  void set_last_msg_uuid(const std::string& value);
  void set_last_msg_uuid(std::string&& value);
  void set_last_msg_uuid(const char* value);
  void set_last_msg_uuid(const char* value, size_t size);
  std::string* mutable_last_msg_uuid();
  std::string* release_last_msg_uuid();
  void set_allocated_last_msg_uuid(std::string* last_msg_uuid);
  private:
  const std::string& _internal_last_msg_uuid() const;
  void _internal_set_last_msg_uuid(const std::string& value);
  std::string* _internal_mutable_last_msg_uuid();
  public:

  // string last_readed_msg_uuid = 6;
  void clear_last_readed_msg_uuid();
  const std::string& last_readed_msg_uuid() const;
  void set_last_readed_msg_uuid(const std::string& value);
  void set_last_readed_msg_uuid(std::string&& value);
  void set_last_readed_msg_uuid(const char* value);
  void set_last_readed_msg_uuid(const char* value, size_t size);
  std::string* mutable_last_readed_msg_uuid();
  std::string* release_last_readed_msg_uuid();
  void set_allocated_last_readed_msg_uuid(std::string* last_readed_msg_uuid);
  private:
  const std::string& _internal_last_readed_msg_uuid() const;
  void _internal_set_last_readed_msg_uuid(const std::string& value);
  std::string* _internal_mutable_last_readed_msg_uuid();
  public:

  // .im.citylife.proto.ProtoIMSendMessage last_msg = 9;
  bool has_last_msg() const;
  private:
  bool _internal_has_last_msg() const;
  public:
  void clear_last_msg();
  const ::im::citylife::proto::ProtoIMSendMessage& last_msg() const;
  ::im::citylife::proto::ProtoIMSendMessage* release_last_msg();
  ::im::citylife::proto::ProtoIMSendMessage* mutable_last_msg();
  void set_allocated_last_msg(::im::citylife::proto::ProtoIMSendMessage* last_msg);
  private:
  const ::im::citylife::proto::ProtoIMSendMessage& _internal_last_msg() const;
  ::im::citylife::proto::ProtoIMSendMessage* _internal_mutable_last_msg();
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 conv_type = 2;
  void clear_conv_type();
  ::PROTOBUF_NAMESPACE_ID::int32 conv_type() const;
  void set_conv_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_conv_type() const;
  void _internal_set_conv_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 unread_count = 8;
  void clear_unread_count();
  ::PROTOBUF_NAMESPACE_ID::int32 unread_count() const;
  void set_unread_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unread_count() const;
  void _internal_set_unread_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 last_readed_msg_timestamp = 7;
  void clear_last_readed_msg_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 last_readed_msg_timestamp() const;
  void set_last_readed_msg_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_readed_msg_timestamp() const;
  void _internal_set_last_readed_msg_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMConversation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conv_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_msg_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_readed_msg_uuid_;
  ::im::citylife::proto::ProtoIMSendMessage* last_msg_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 conv_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 unread_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_readed_msg_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMConversations :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMConversations) */ {
 public:
  ProtoIMConversations();
  virtual ~ProtoIMConversations();

  ProtoIMConversations(const ProtoIMConversations& from);
  ProtoIMConversations(ProtoIMConversations&& from) noexcept
    : ProtoIMConversations() {
    *this = ::std::move(from);
  }

  inline ProtoIMConversations& operator=(const ProtoIMConversations& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMConversations& operator=(ProtoIMConversations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMConversations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMConversations* internal_default_instance() {
    return reinterpret_cast<const ProtoIMConversations*>(
               &_ProtoIMConversations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ProtoIMConversations& a, ProtoIMConversations& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMConversations* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMConversations* New() const final {
    return CreateMaybeMessage<ProtoIMConversations>(nullptr);
  }

  ProtoIMConversations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMConversations>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMConversations& from);
  void MergeFrom(const ProtoIMConversations& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMConversations* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMConversations";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConvsFieldNumber = 1,
  };
  // repeated .im.citylife.proto.ProtoIMConversation convs = 1;
  int convs_size() const;
  private:
  int _internal_convs_size() const;
  public:
  void clear_convs();
  ::im::citylife::proto::ProtoIMConversation* mutable_convs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::citylife::proto::ProtoIMConversation >*
      mutable_convs();
  private:
  const ::im::citylife::proto::ProtoIMConversation& _internal_convs(int index) const;
  ::im::citylife::proto::ProtoIMConversation* _internal_add_convs();
  public:
  const ::im::citylife::proto::ProtoIMConversation& convs(int index) const;
  ::im::citylife::proto::ProtoIMConversation* add_convs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::citylife::proto::ProtoIMConversation >&
      convs() const;

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMConversations)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::citylife::proto::ProtoIMConversation > convs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMMessageEx :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMMessageEx) */ {
 public:
  ProtoIMMessageEx();
  virtual ~ProtoIMMessageEx();

  ProtoIMMessageEx(const ProtoIMMessageEx& from);
  ProtoIMMessageEx(ProtoIMMessageEx&& from) noexcept
    : ProtoIMMessageEx() {
    *this = ::std::move(from);
  }

  inline ProtoIMMessageEx& operator=(const ProtoIMMessageEx& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMMessageEx& operator=(ProtoIMMessageEx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMMessageEx& default_instance();

  enum TestOneofCase {
    kText = 16,
    kImage = 17,
    TEST_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMMessageEx* internal_default_instance() {
    return reinterpret_cast<const ProtoIMMessageEx*>(
               &_ProtoIMMessageEx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ProtoIMMessageEx& a, ProtoIMMessageEx& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMMessageEx* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMMessageEx* New() const final {
    return CreateMaybeMessage<ProtoIMMessageEx>(nullptr);
  }

  ProtoIMMessageEx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMMessageEx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMMessageEx& from);
  void MergeFrom(const ProtoIMMessageEx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMMessageEx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMMessageEx";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgUuidFieldNumber = 1,
    kSenderFieldNumber = 4,
    kReceiverFieldNumber = 5,
    kExtraFieldNumber = 8,
    kConvFieldNumber = 2,
    kTimestampFieldNumber = 6,
    kMsgStatusFieldNumber = 7,
    kTextFieldNumber = 16,
    kImageFieldNumber = 17,
  };
  // string msg_uuid = 1;
  void clear_msg_uuid();
  const std::string& msg_uuid() const;
  void set_msg_uuid(const std::string& value);
  void set_msg_uuid(std::string&& value);
  void set_msg_uuid(const char* value);
  void set_msg_uuid(const char* value, size_t size);
  std::string* mutable_msg_uuid();
  std::string* release_msg_uuid();
  void set_allocated_msg_uuid(std::string* msg_uuid);
  private:
  const std::string& _internal_msg_uuid() const;
  void _internal_set_msg_uuid(const std::string& value);
  std::string* _internal_mutable_msg_uuid();
  public:

  // string sender = 4;
  void clear_sender();
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string receiver = 5;
  void clear_receiver();
  const std::string& receiver() const;
  void set_receiver(const std::string& value);
  void set_receiver(std::string&& value);
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  std::string* mutable_receiver();
  std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);
  private:
  const std::string& _internal_receiver() const;
  void _internal_set_receiver(const std::string& value);
  std::string* _internal_mutable_receiver();
  public:

  // string extra = 8;
  void clear_extra();
  const std::string& extra() const;
  void set_extra(const std::string& value);
  void set_extra(std::string&& value);
  void set_extra(const char* value);
  void set_extra(const char* value, size_t size);
  std::string* mutable_extra();
  std::string* release_extra();
  void set_allocated_extra(std::string* extra);
  private:
  const std::string& _internal_extra() const;
  void _internal_set_extra(const std::string& value);
  std::string* _internal_mutable_extra();
  public:

  // .im.citylife.proto.ProtoIMConversationBase conv = 2;
  bool has_conv() const;
  private:
  bool _internal_has_conv() const;
  public:
  void clear_conv();
  const ::im::citylife::proto::ProtoIMConversationBase& conv() const;
  ::im::citylife::proto::ProtoIMConversationBase* release_conv();
  ::im::citylife::proto::ProtoIMConversationBase* mutable_conv();
  void set_allocated_conv(::im::citylife::proto::ProtoIMConversationBase* conv);
  private:
  const ::im::citylife::proto::ProtoIMConversationBase& _internal_conv() const;
  ::im::citylife::proto::ProtoIMConversationBase* _internal_mutable_conv();
  public:

  // int64 timestamp = 6;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .im.citylife.proto.ProtoIMMessageStatus msg_status = 7;
  void clear_msg_status();
  ::im::citylife::proto::ProtoIMMessageStatus msg_status() const;
  void set_msg_status(::im::citylife::proto::ProtoIMMessageStatus value);
  private:
  ::im::citylife::proto::ProtoIMMessageStatus _internal_msg_status() const;
  void _internal_set_msg_status(::im::citylife::proto::ProtoIMMessageStatus value);
  public:

  // .im.citylife.proto.ProtoIMMessageText text = 16;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::im::citylife::proto::ProtoIMMessageText& text() const;
  ::im::citylife::proto::ProtoIMMessageText* release_text();
  ::im::citylife::proto::ProtoIMMessageText* mutable_text();
  void set_allocated_text(::im::citylife::proto::ProtoIMMessageText* text);
  private:
  const ::im::citylife::proto::ProtoIMMessageText& _internal_text() const;
  ::im::citylife::proto::ProtoIMMessageText* _internal_mutable_text();
  public:

  // .im.citylife.proto.ProtoIMMessageImage image = 17;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::im::citylife::proto::ProtoIMMessageImage& image() const;
  ::im::citylife::proto::ProtoIMMessageImage* release_image();
  ::im::citylife::proto::ProtoIMMessageImage* mutable_image();
  void set_allocated_image(::im::citylife::proto::ProtoIMMessageImage* image);
  private:
  const ::im::citylife::proto::ProtoIMMessageImage& _internal_image() const;
  ::im::citylife::proto::ProtoIMMessageImage* _internal_mutable_image();
  public:

  void clear_test_oneof();
  TestOneofCase test_oneof_case() const;
  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMMessageEx)
 private:
  class _Internal;
  void set_has_text();
  void set_has_image();

  inline bool has_test_oneof() const;
  inline void clear_has_test_oneof();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_;
  ::im::citylife::proto::ProtoIMConversationBase* conv_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  int msg_status_;
  union TestOneofUnion {
    TestOneofUnion() {}
    ::im::citylife::proto::ProtoIMMessageText* text_;
    ::im::citylife::proto::ProtoIMMessageImage* image_;
  } test_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMConversationBase :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMConversationBase) */ {
 public:
  ProtoIMConversationBase();
  virtual ~ProtoIMConversationBase();

  ProtoIMConversationBase(const ProtoIMConversationBase& from);
  ProtoIMConversationBase(ProtoIMConversationBase&& from) noexcept
    : ProtoIMConversationBase() {
    *this = ::std::move(from);
  }

  inline ProtoIMConversationBase& operator=(const ProtoIMConversationBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMConversationBase& operator=(ProtoIMConversationBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMConversationBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMConversationBase* internal_default_instance() {
    return reinterpret_cast<const ProtoIMConversationBase*>(
               &_ProtoIMConversationBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ProtoIMConversationBase& a, ProtoIMConversationBase& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMConversationBase* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMConversationBase* New() const final {
    return CreateMaybeMessage<ProtoIMConversationBase>(nullptr);
  }

  ProtoIMConversationBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMConversationBase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMConversationBase& from);
  void MergeFrom(const ProtoIMConversationBase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMConversationBase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMConversationBase";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConvIdFieldNumber = 1,
    kConvTypeFieldNumber = 2,
  };
  // string conv_id = 1;
  void clear_conv_id();
  const std::string& conv_id() const;
  void set_conv_id(const std::string& value);
  void set_conv_id(std::string&& value);
  void set_conv_id(const char* value);
  void set_conv_id(const char* value, size_t size);
  std::string* mutable_conv_id();
  std::string* release_conv_id();
  void set_allocated_conv_id(std::string* conv_id);
  private:
  const std::string& _internal_conv_id() const;
  void _internal_set_conv_id(const std::string& value);
  std::string* _internal_mutable_conv_id();
  public:

  // int32 conv_type = 2;
  void clear_conv_type();
  ::PROTOBUF_NAMESPACE_ID::int32 conv_type() const;
  void set_conv_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_conv_type() const;
  void _internal_set_conv_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMConversationBase)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conv_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 conv_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMMessageText :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMMessageText) */ {
 public:
  ProtoIMMessageText();
  virtual ~ProtoIMMessageText();

  ProtoIMMessageText(const ProtoIMMessageText& from);
  ProtoIMMessageText(ProtoIMMessageText&& from) noexcept
    : ProtoIMMessageText() {
    *this = ::std::move(from);
  }

  inline ProtoIMMessageText& operator=(const ProtoIMMessageText& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMMessageText& operator=(ProtoIMMessageText&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMMessageText& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMMessageText* internal_default_instance() {
    return reinterpret_cast<const ProtoIMMessageText*>(
               &_ProtoIMMessageText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ProtoIMMessageText& a, ProtoIMMessageText& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMMessageText* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMMessageText* New() const final {
    return CreateMaybeMessage<ProtoIMMessageText>(nullptr);
  }

  ProtoIMMessageText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMMessageText>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMMessageText& from);
  void MergeFrom(const ProtoIMMessageText& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMMessageText* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMMessageText";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMMessageText)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMImage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMImage) */ {
 public:
  ProtoIMImage();
  virtual ~ProtoIMImage();

  ProtoIMImage(const ProtoIMImage& from);
  ProtoIMImage(ProtoIMImage&& from) noexcept
    : ProtoIMImage() {
    *this = ::std::move(from);
  }

  inline ProtoIMImage& operator=(const ProtoIMImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMImage& operator=(ProtoIMImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMImage* internal_default_instance() {
    return reinterpret_cast<const ProtoIMImage*>(
               &_ProtoIMImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ProtoIMImage& a, ProtoIMImage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMImage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMImage* New() const final {
    return CreateMaybeMessage<ProtoIMImage>(nullptr);
  }

  ProtoIMImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMImage& from);
  void MergeFrom(const ProtoIMImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMImage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageUuidFieldNumber = 1,
    kImageUrlFieldNumber = 6,
    kImageTypeFieldNumber = 2,
    kImageSizeFieldNumber = 3,
    kImageHeighFieldNumber = 4,
    kImageWidthFieldNumber = 5,
  };
  // string image_uuid = 1;
  void clear_image_uuid();
  const std::string& image_uuid() const;
  void set_image_uuid(const std::string& value);
  void set_image_uuid(std::string&& value);
  void set_image_uuid(const char* value);
  void set_image_uuid(const char* value, size_t size);
  std::string* mutable_image_uuid();
  std::string* release_image_uuid();
  void set_allocated_image_uuid(std::string* image_uuid);
  private:
  const std::string& _internal_image_uuid() const;
  void _internal_set_image_uuid(const std::string& value);
  std::string* _internal_mutable_image_uuid();
  public:

  // string image_url = 6;
  void clear_image_url();
  const std::string& image_url() const;
  void set_image_url(const std::string& value);
  void set_image_url(std::string&& value);
  void set_image_url(const char* value);
  void set_image_url(const char* value, size_t size);
  std::string* mutable_image_url();
  std::string* release_image_url();
  void set_allocated_image_url(std::string* image_url);
  private:
  const std::string& _internal_image_url() const;
  void _internal_set_image_url(const std::string& value);
  std::string* _internal_mutable_image_url();
  public:

  // int32 image_type = 2;
  void clear_image_type();
  ::PROTOBUF_NAMESPACE_ID::int32 image_type() const;
  void set_image_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_type() const;
  void _internal_set_image_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 image_size = 3;
  void clear_image_size();
  ::PROTOBUF_NAMESPACE_ID::int32 image_size() const;
  void set_image_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_size() const;
  void _internal_set_image_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 image_heigh = 4;
  void clear_image_heigh();
  ::PROTOBUF_NAMESPACE_ID::int32 image_heigh() const;
  void set_image_heigh(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_heigh() const;
  void _internal_set_image_heigh(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 image_width = 5;
  void clear_image_width();
  ::PROTOBUF_NAMESPACE_ID::int32 image_width() const;
  void set_image_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_width() const;
  void _internal_set_image_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMImage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_url_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_heigh_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ProtoIMMessageImage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.citylife.proto.ProtoIMMessageImage) */ {
 public:
  ProtoIMMessageImage();
  virtual ~ProtoIMMessageImage();

  ProtoIMMessageImage(const ProtoIMMessageImage& from);
  ProtoIMMessageImage(ProtoIMMessageImage&& from) noexcept
    : ProtoIMMessageImage() {
    *this = ::std::move(from);
  }

  inline ProtoIMMessageImage& operator=(const ProtoIMMessageImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoIMMessageImage& operator=(ProtoIMMessageImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoIMMessageImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoIMMessageImage* internal_default_instance() {
    return reinterpret_cast<const ProtoIMMessageImage*>(
               &_ProtoIMMessageImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ProtoIMMessageImage& a, ProtoIMMessageImage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoIMMessageImage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoIMMessageImage* New() const final {
    return CreateMaybeMessage<ProtoIMMessageImage>(nullptr);
  }

  ProtoIMMessageImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoIMMessageImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoIMMessageImage& from);
  void MergeFrom(const ProtoIMMessageImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoIMMessageImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.citylife.proto.ProtoIMMessageImage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_2eproto);
    return ::descriptor_table_IM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 5,
    kImageUuidFieldNumber = 1,
    kLocalPathFieldNumber = 2,
    kCompressLevelFieldNumber = 3,
    kFormatFieldNumber = 4,
  };
  // repeated .im.citylife.proto.ProtoIMImage images = 5;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::im::citylife::proto::ProtoIMImage* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::citylife::proto::ProtoIMImage >*
      mutable_images();
  private:
  const ::im::citylife::proto::ProtoIMImage& _internal_images(int index) const;
  ::im::citylife::proto::ProtoIMImage* _internal_add_images();
  public:
  const ::im::citylife::proto::ProtoIMImage& images(int index) const;
  ::im::citylife::proto::ProtoIMImage* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::citylife::proto::ProtoIMImage >&
      images() const;

  // string image_uuid = 1;
  void clear_image_uuid();
  const std::string& image_uuid() const;
  void set_image_uuid(const std::string& value);
  void set_image_uuid(std::string&& value);
  void set_image_uuid(const char* value);
  void set_image_uuid(const char* value, size_t size);
  std::string* mutable_image_uuid();
  std::string* release_image_uuid();
  void set_allocated_image_uuid(std::string* image_uuid);
  private:
  const std::string& _internal_image_uuid() const;
  void _internal_set_image_uuid(const std::string& value);
  std::string* _internal_mutable_image_uuid();
  public:

  // string local_path = 2;
  void clear_local_path();
  const std::string& local_path() const;
  void set_local_path(const std::string& value);
  void set_local_path(std::string&& value);
  void set_local_path(const char* value);
  void set_local_path(const char* value, size_t size);
  std::string* mutable_local_path();
  std::string* release_local_path();
  void set_allocated_local_path(std::string* local_path);
  private:
  const std::string& _internal_local_path() const;
  void _internal_set_local_path(const std::string& value);
  std::string* _internal_mutable_local_path();
  public:

  // int32 compress_level = 3;
  void clear_compress_level();
  ::PROTOBUF_NAMESPACE_ID::int32 compress_level() const;
  void set_compress_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_compress_level() const;
  void _internal_set_compress_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 format = 4;
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::int32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_format() const;
  void _internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.citylife.proto.ProtoIMMessageImage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::citylife::proto::ProtoIMImage > images_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 compress_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoIMAppConnectParam

// string token = 1;
inline void ProtoIMAppConnectParam::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppConnectParam::token() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppConnectParam.token)
  return _internal_token();
}
inline void ProtoIMAppConnectParam::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppConnectParam.token)
}
inline std::string* ProtoIMAppConnectParam::mutable_token() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppConnectParam.token)
  return _internal_mutable_token();
}
inline const std::string& ProtoIMAppConnectParam::_internal_token() const {
  return token_.GetNoArena();
}
inline void ProtoIMAppConnectParam::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppConnectParam::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppConnectParam.token)
}
inline void ProtoIMAppConnectParam::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppConnectParam.token)
}
inline void ProtoIMAppConnectParam::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppConnectParam.token)
}
inline std::string* ProtoIMAppConnectParam::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppConnectParam::release_token() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppConnectParam.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppConnectParam::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppConnectParam.token)
}

// string deviceId = 2;
inline void ProtoIMAppConnectParam::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppConnectParam::deviceid() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppConnectParam.deviceId)
  return _internal_deviceid();
}
inline void ProtoIMAppConnectParam::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppConnectParam.deviceId)
}
inline std::string* ProtoIMAppConnectParam::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppConnectParam.deviceId)
  return _internal_mutable_deviceid();
}
inline const std::string& ProtoIMAppConnectParam::_internal_deviceid() const {
  return deviceid_.GetNoArena();
}
inline void ProtoIMAppConnectParam::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppConnectParam::set_deviceid(std::string&& value) {
  
  deviceid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppConnectParam.deviceId)
}
inline void ProtoIMAppConnectParam::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppConnectParam.deviceId)
}
inline void ProtoIMAppConnectParam::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppConnectParam.deviceId)
}
inline std::string* ProtoIMAppConnectParam::_internal_mutable_deviceid() {
  
  return deviceid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppConnectParam::release_deviceid() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppConnectParam.deviceId)
  
  return deviceid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppConnectParam::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppConnectParam.deviceId)
}

// string packageName = 3;
inline void ProtoIMAppConnectParam::clear_packagename() {
  packagename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppConnectParam::packagename() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppConnectParam.packageName)
  return _internal_packagename();
}
inline void ProtoIMAppConnectParam::set_packagename(const std::string& value) {
  _internal_set_packagename(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppConnectParam.packageName)
}
inline std::string* ProtoIMAppConnectParam::mutable_packagename() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppConnectParam.packageName)
  return _internal_mutable_packagename();
}
inline const std::string& ProtoIMAppConnectParam::_internal_packagename() const {
  return packagename_.GetNoArena();
}
inline void ProtoIMAppConnectParam::_internal_set_packagename(const std::string& value) {
  
  packagename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppConnectParam::set_packagename(std::string&& value) {
  
  packagename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppConnectParam.packageName)
}
inline void ProtoIMAppConnectParam::set_packagename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  packagename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppConnectParam.packageName)
}
inline void ProtoIMAppConnectParam::set_packagename(const char* value, size_t size) {
  
  packagename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppConnectParam.packageName)
}
inline std::string* ProtoIMAppConnectParam::_internal_mutable_packagename() {
  
  return packagename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppConnectParam::release_packagename() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppConnectParam.packageName)
  
  return packagename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppConnectParam::set_allocated_packagename(std::string* packagename) {
  if (packagename != nullptr) {
    
  } else {
    
  }
  packagename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packagename);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppConnectParam.packageName)
}

// .im.citylife.proto.ProtoIMBaseInfo info = 4;
inline bool ProtoIMAppConnectParam::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ProtoIMAppConnectParam::has_info() const {
  return _internal_has_info();
}
inline void ProtoIMAppConnectParam::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::im::citylife::proto::ProtoIMBaseInfo& ProtoIMAppConnectParam::_internal_info() const {
  const ::im::citylife::proto::ProtoIMBaseInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::im::citylife::proto::ProtoIMBaseInfo*>(
      &::im::citylife::proto::_ProtoIMBaseInfo_default_instance_);
}
inline const ::im::citylife::proto::ProtoIMBaseInfo& ProtoIMAppConnectParam::info() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppConnectParam.info)
  return _internal_info();
}
inline ::im::citylife::proto::ProtoIMBaseInfo* ProtoIMAppConnectParam::release_info() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppConnectParam.info)
  
  ::im::citylife::proto::ProtoIMBaseInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::im::citylife::proto::ProtoIMBaseInfo* ProtoIMAppConnectParam::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::citylife::proto::ProtoIMBaseInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::im::citylife::proto::ProtoIMBaseInfo* ProtoIMAppConnectParam::mutable_info() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppConnectParam.info)
  return _internal_mutable_info();
}
inline void ProtoIMAppConnectParam::set_allocated_info(::im::citylife::proto::ProtoIMBaseInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppConnectParam.info)
}

// -------------------------------------------------------------------

// ProtoIMBaseInfo

// string platform = 1;
inline void ProtoIMBaseInfo::clear_platform() {
  platform_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMBaseInfo::platform() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMBaseInfo.platform)
  return _internal_platform();
}
inline void ProtoIMBaseInfo::set_platform(const std::string& value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMBaseInfo.platform)
}
inline std::string* ProtoIMBaseInfo::mutable_platform() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMBaseInfo.platform)
  return _internal_mutable_platform();
}
inline const std::string& ProtoIMBaseInfo::_internal_platform() const {
  return platform_.GetNoArena();
}
inline void ProtoIMBaseInfo::_internal_set_platform(const std::string& value) {
  
  platform_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMBaseInfo::set_platform(std::string&& value) {
  
  platform_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMBaseInfo.platform)
}
inline void ProtoIMBaseInfo::set_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMBaseInfo.platform)
}
inline void ProtoIMBaseInfo::set_platform(const char* value, size_t size) {
  
  platform_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMBaseInfo.platform)
}
inline std::string* ProtoIMBaseInfo::_internal_mutable_platform() {
  
  return platform_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMBaseInfo::release_platform() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMBaseInfo.platform)
  
  return platform_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMBaseInfo::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  platform_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMBaseInfo.platform)
}

// string sdkVersion = 2;
inline void ProtoIMBaseInfo::clear_sdkversion() {
  sdkversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMBaseInfo::sdkversion() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMBaseInfo.sdkVersion)
  return _internal_sdkversion();
}
inline void ProtoIMBaseInfo::set_sdkversion(const std::string& value) {
  _internal_set_sdkversion(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMBaseInfo.sdkVersion)
}
inline std::string* ProtoIMBaseInfo::mutable_sdkversion() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMBaseInfo.sdkVersion)
  return _internal_mutable_sdkversion();
}
inline const std::string& ProtoIMBaseInfo::_internal_sdkversion() const {
  return sdkversion_.GetNoArena();
}
inline void ProtoIMBaseInfo::_internal_set_sdkversion(const std::string& value) {
  
  sdkversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMBaseInfo::set_sdkversion(std::string&& value) {
  
  sdkversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMBaseInfo.sdkVersion)
}
inline void ProtoIMBaseInfo::set_sdkversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sdkversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMBaseInfo.sdkVersion)
}
inline void ProtoIMBaseInfo::set_sdkversion(const char* value, size_t size) {
  
  sdkversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMBaseInfo.sdkVersion)
}
inline std::string* ProtoIMBaseInfo::_internal_mutable_sdkversion() {
  
  return sdkversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMBaseInfo::release_sdkversion() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMBaseInfo.sdkVersion)
  
  return sdkversion_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMBaseInfo::set_allocated_sdkversion(std::string* sdkversion) {
  if (sdkversion != nullptr) {
    
  } else {
    
  }
  sdkversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdkversion);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMBaseInfo.sdkVersion)
}

// .im.citylife.proto.ProtoIMDeviceInfo deviceInfo = 3;
inline bool ProtoIMBaseInfo::_internal_has_deviceinfo() const {
  return this != internal_default_instance() && deviceinfo_ != nullptr;
}
inline bool ProtoIMBaseInfo::has_deviceinfo() const {
  return _internal_has_deviceinfo();
}
inline void ProtoIMBaseInfo::clear_deviceinfo() {
  if (GetArenaNoVirtual() == nullptr && deviceinfo_ != nullptr) {
    delete deviceinfo_;
  }
  deviceinfo_ = nullptr;
}
inline const ::im::citylife::proto::ProtoIMDeviceInfo& ProtoIMBaseInfo::_internal_deviceinfo() const {
  const ::im::citylife::proto::ProtoIMDeviceInfo* p = deviceinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::im::citylife::proto::ProtoIMDeviceInfo*>(
      &::im::citylife::proto::_ProtoIMDeviceInfo_default_instance_);
}
inline const ::im::citylife::proto::ProtoIMDeviceInfo& ProtoIMBaseInfo::deviceinfo() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMBaseInfo.deviceInfo)
  return _internal_deviceinfo();
}
inline ::im::citylife::proto::ProtoIMDeviceInfo* ProtoIMBaseInfo::release_deviceinfo() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMBaseInfo.deviceInfo)
  
  ::im::citylife::proto::ProtoIMDeviceInfo* temp = deviceinfo_;
  deviceinfo_ = nullptr;
  return temp;
}
inline ::im::citylife::proto::ProtoIMDeviceInfo* ProtoIMBaseInfo::_internal_mutable_deviceinfo() {
  
  if (deviceinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::citylife::proto::ProtoIMDeviceInfo>(GetArenaNoVirtual());
    deviceinfo_ = p;
  }
  return deviceinfo_;
}
inline ::im::citylife::proto::ProtoIMDeviceInfo* ProtoIMBaseInfo::mutable_deviceinfo() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMBaseInfo.deviceInfo)
  return _internal_mutable_deviceinfo();
}
inline void ProtoIMBaseInfo::set_allocated_deviceinfo(::im::citylife::proto::ProtoIMDeviceInfo* deviceinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete deviceinfo_;
  }
  if (deviceinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      deviceinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deviceinfo, submessage_arena);
    }
    
  } else {
    
  }
  deviceinfo_ = deviceinfo;
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMBaseInfo.deviceInfo)
}

// -------------------------------------------------------------------

// ProtoIMDeviceInfo

// string osNameVersion = 1;
inline void ProtoIMDeviceInfo::clear_osnameversion() {
  osnameversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMDeviceInfo::osnameversion() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMDeviceInfo.osNameVersion)
  return _internal_osnameversion();
}
inline void ProtoIMDeviceInfo::set_osnameversion(const std::string& value) {
  _internal_set_osnameversion(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMDeviceInfo.osNameVersion)
}
inline std::string* ProtoIMDeviceInfo::mutable_osnameversion() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMDeviceInfo.osNameVersion)
  return _internal_mutable_osnameversion();
}
inline const std::string& ProtoIMDeviceInfo::_internal_osnameversion() const {
  return osnameversion_.GetNoArena();
}
inline void ProtoIMDeviceInfo::_internal_set_osnameversion(const std::string& value) {
  
  osnameversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMDeviceInfo::set_osnameversion(std::string&& value) {
  
  osnameversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMDeviceInfo.osNameVersion)
}
inline void ProtoIMDeviceInfo::set_osnameversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  osnameversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMDeviceInfo.osNameVersion)
}
inline void ProtoIMDeviceInfo::set_osnameversion(const char* value, size_t size) {
  
  osnameversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMDeviceInfo.osNameVersion)
}
inline std::string* ProtoIMDeviceInfo::_internal_mutable_osnameversion() {
  
  return osnameversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMDeviceInfo::release_osnameversion() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMDeviceInfo.osNameVersion)
  
  return osnameversion_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMDeviceInfo::set_allocated_osnameversion(std::string* osnameversion) {
  if (osnameversion != nullptr) {
    
  } else {
    
  }
  osnameversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osnameversion);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMDeviceInfo.osNameVersion)
}

// string network = 2;
inline void ProtoIMDeviceInfo::clear_network() {
  network_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMDeviceInfo::network() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMDeviceInfo.network)
  return _internal_network();
}
inline void ProtoIMDeviceInfo::set_network(const std::string& value) {
  _internal_set_network(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMDeviceInfo.network)
}
inline std::string* ProtoIMDeviceInfo::mutable_network() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMDeviceInfo.network)
  return _internal_mutable_network();
}
inline const std::string& ProtoIMDeviceInfo::_internal_network() const {
  return network_.GetNoArena();
}
inline void ProtoIMDeviceInfo::_internal_set_network(const std::string& value) {
  
  network_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMDeviceInfo::set_network(std::string&& value) {
  
  network_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMDeviceInfo.network)
}
inline void ProtoIMDeviceInfo::set_network(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  network_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMDeviceInfo.network)
}
inline void ProtoIMDeviceInfo::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMDeviceInfo.network)
}
inline std::string* ProtoIMDeviceInfo::_internal_mutable_network() {
  
  return network_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMDeviceInfo::release_network() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMDeviceInfo.network)
  
  return network_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMDeviceInfo::set_allocated_network(std::string* network) {
  if (network != nullptr) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMDeviceInfo.network)
}

// string networkSp = 3;
inline void ProtoIMDeviceInfo::clear_networksp() {
  networksp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMDeviceInfo::networksp() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMDeviceInfo.networkSp)
  return _internal_networksp();
}
inline void ProtoIMDeviceInfo::set_networksp(const std::string& value) {
  _internal_set_networksp(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMDeviceInfo.networkSp)
}
inline std::string* ProtoIMDeviceInfo::mutable_networksp() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMDeviceInfo.networkSp)
  return _internal_mutable_networksp();
}
inline const std::string& ProtoIMDeviceInfo::_internal_networksp() const {
  return networksp_.GetNoArena();
}
inline void ProtoIMDeviceInfo::_internal_set_networksp(const std::string& value) {
  
  networksp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMDeviceInfo::set_networksp(std::string&& value) {
  
  networksp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMDeviceInfo.networkSp)
}
inline void ProtoIMDeviceInfo::set_networksp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  networksp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMDeviceInfo.networkSp)
}
inline void ProtoIMDeviceInfo::set_networksp(const char* value, size_t size) {
  
  networksp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMDeviceInfo.networkSp)
}
inline std::string* ProtoIMDeviceInfo::_internal_mutable_networksp() {
  
  return networksp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMDeviceInfo::release_networksp() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMDeviceInfo.networkSp)
  
  return networksp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMDeviceInfo::set_allocated_networksp(std::string* networksp) {
  if (networksp != nullptr) {
    
  } else {
    
  }
  networksp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), networksp);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMDeviceInfo.networkSp)
}

// -------------------------------------------------------------------

// ProtoIMConfigInfo

// string rootDir = 1;
inline void ProtoIMConfigInfo::clear_rootdir() {
  rootdir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMConfigInfo::rootdir() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConfigInfo.rootDir)
  return _internal_rootdir();
}
inline void ProtoIMConfigInfo::set_rootdir(const std::string& value) {
  _internal_set_rootdir(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMConfigInfo.rootDir)
}
inline std::string* ProtoIMConfigInfo::mutable_rootdir() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMConfigInfo.rootDir)
  return _internal_mutable_rootdir();
}
inline const std::string& ProtoIMConfigInfo::_internal_rootdir() const {
  return rootdir_.GetNoArena();
}
inline void ProtoIMConfigInfo::_internal_set_rootdir(const std::string& value) {
  
  rootdir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMConfigInfo::set_rootdir(std::string&& value) {
  
  rootdir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMConfigInfo.rootDir)
}
inline void ProtoIMConfigInfo::set_rootdir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rootdir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMConfigInfo.rootDir)
}
inline void ProtoIMConfigInfo::set_rootdir(const char* value, size_t size) {
  
  rootdir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMConfigInfo.rootDir)
}
inline std::string* ProtoIMConfigInfo::_internal_mutable_rootdir() {
  
  return rootdir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMConfigInfo::release_rootdir() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMConfigInfo.rootDir)
  
  return rootdir_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMConfigInfo::set_allocated_rootdir(std::string* rootdir) {
  if (rootdir != nullptr) {
    
  } else {
    
  }
  rootdir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rootdir);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMConfigInfo.rootDir)
}

// string databaseDir = 2;
inline void ProtoIMConfigInfo::clear_databasedir() {
  databasedir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMConfigInfo::databasedir() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConfigInfo.databaseDir)
  return _internal_databasedir();
}
inline void ProtoIMConfigInfo::set_databasedir(const std::string& value) {
  _internal_set_databasedir(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMConfigInfo.databaseDir)
}
inline std::string* ProtoIMConfigInfo::mutable_databasedir() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMConfigInfo.databaseDir)
  return _internal_mutable_databasedir();
}
inline const std::string& ProtoIMConfigInfo::_internal_databasedir() const {
  return databasedir_.GetNoArena();
}
inline void ProtoIMConfigInfo::_internal_set_databasedir(const std::string& value) {
  
  databasedir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMConfigInfo::set_databasedir(std::string&& value) {
  
  databasedir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMConfigInfo.databaseDir)
}
inline void ProtoIMConfigInfo::set_databasedir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  databasedir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMConfigInfo.databaseDir)
}
inline void ProtoIMConfigInfo::set_databasedir(const char* value, size_t size) {
  
  databasedir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMConfigInfo.databaseDir)
}
inline std::string* ProtoIMConfigInfo::_internal_mutable_databasedir() {
  
  return databasedir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMConfigInfo::release_databasedir() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMConfigInfo.databaseDir)
  
  return databasedir_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMConfigInfo::set_allocated_databasedir(std::string* databasedir) {
  if (databasedir != nullptr) {
    
  } else {
    
  }
  databasedir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), databasedir);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMConfigInfo.databaseDir)
}

// string logDir = 3;
inline void ProtoIMConfigInfo::clear_logdir() {
  logdir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMConfigInfo::logdir() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConfigInfo.logDir)
  return _internal_logdir();
}
inline void ProtoIMConfigInfo::set_logdir(const std::string& value) {
  _internal_set_logdir(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMConfigInfo.logDir)
}
inline std::string* ProtoIMConfigInfo::mutable_logdir() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMConfigInfo.logDir)
  return _internal_mutable_logdir();
}
inline const std::string& ProtoIMConfigInfo::_internal_logdir() const {
  return logdir_.GetNoArena();
}
inline void ProtoIMConfigInfo::_internal_set_logdir(const std::string& value) {
  
  logdir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMConfigInfo::set_logdir(std::string&& value) {
  
  logdir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMConfigInfo.logDir)
}
inline void ProtoIMConfigInfo::set_logdir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logdir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMConfigInfo.logDir)
}
inline void ProtoIMConfigInfo::set_logdir(const char* value, size_t size) {
  
  logdir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMConfigInfo.logDir)
}
inline std::string* ProtoIMConfigInfo::_internal_mutable_logdir() {
  
  return logdir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMConfigInfo::release_logdir() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMConfigInfo.logDir)
  
  return logdir_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMConfigInfo::set_allocated_logdir(std::string* logdir) {
  if (logdir != nullptr) {
    
  } else {
    
  }
  logdir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logdir);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMConfigInfo.logDir)
}

// int32 backgroundMode = 4;
inline void ProtoIMConfigInfo::clear_backgroundmode() {
  backgroundmode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMConfigInfo::_internal_backgroundmode() const {
  return backgroundmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMConfigInfo::backgroundmode() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConfigInfo.backgroundMode)
  return _internal_backgroundmode();
}
inline void ProtoIMConfigInfo::_internal_set_backgroundmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  backgroundmode_ = value;
}
inline void ProtoIMConfigInfo::set_backgroundmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_backgroundmode(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMConfigInfo.backgroundMode)
}

// string naviDomain = 5;
inline void ProtoIMConfigInfo::clear_navidomain() {
  navidomain_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMConfigInfo::navidomain() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConfigInfo.naviDomain)
  return _internal_navidomain();
}
inline void ProtoIMConfigInfo::set_navidomain(const std::string& value) {
  _internal_set_navidomain(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMConfigInfo.naviDomain)
}
inline std::string* ProtoIMConfigInfo::mutable_navidomain() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMConfigInfo.naviDomain)
  return _internal_mutable_navidomain();
}
inline const std::string& ProtoIMConfigInfo::_internal_navidomain() const {
  return navidomain_.GetNoArena();
}
inline void ProtoIMConfigInfo::_internal_set_navidomain(const std::string& value) {
  
  navidomain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMConfigInfo::set_navidomain(std::string&& value) {
  
  navidomain_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMConfigInfo.naviDomain)
}
inline void ProtoIMConfigInfo::set_navidomain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  navidomain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMConfigInfo.naviDomain)
}
inline void ProtoIMConfigInfo::set_navidomain(const char* value, size_t size) {
  
  navidomain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMConfigInfo.naviDomain)
}
inline std::string* ProtoIMConfigInfo::_internal_mutable_navidomain() {
  
  return navidomain_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMConfigInfo::release_navidomain() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMConfigInfo.naviDomain)
  
  return navidomain_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMConfigInfo::set_allocated_navidomain(std::string* navidomain) {
  if (navidomain != nullptr) {
    
  } else {
    
  }
  navidomain_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), navidomain);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMConfigInfo.naviDomain)
}

// bool enableHttp2 = 6;
inline void ProtoIMConfigInfo::clear_enablehttp2() {
  enablehttp2_ = false;
}
inline bool ProtoIMConfigInfo::_internal_enablehttp2() const {
  return enablehttp2_;
}
inline bool ProtoIMConfigInfo::enablehttp2() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConfigInfo.enableHttp2)
  return _internal_enablehttp2();
}
inline void ProtoIMConfigInfo::_internal_set_enablehttp2(bool value) {
  
  enablehttp2_ = value;
}
inline void ProtoIMConfigInfo::set_enablehttp2(bool value) {
  _internal_set_enablehttp2(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMConfigInfo.enableHttp2)
}

// int32 logLevel = 7;
inline void ProtoIMConfigInfo::clear_loglevel() {
  loglevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMConfigInfo::_internal_loglevel() const {
  return loglevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMConfigInfo::loglevel() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConfigInfo.logLevel)
  return _internal_loglevel();
}
inline void ProtoIMConfigInfo::_internal_set_loglevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  loglevel_ = value;
}
inline void ProtoIMConfigInfo::set_loglevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_loglevel(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMConfigInfo.logLevel)
}

// -------------------------------------------------------------------

// ProtoIMAppRecvMessage

// int32 convType = 1;
inline void ProtoIMAppRecvMessage::clear_convtype() {
  convtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMAppRecvMessage::_internal_convtype() const {
  return convtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMAppRecvMessage::convtype() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppRecvMessage.convType)
  return _internal_convtype();
}
inline void ProtoIMAppRecvMessage::_internal_set_convtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  convtype_ = value;
}
inline void ProtoIMAppRecvMessage::set_convtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_convtype(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppRecvMessage.convType)
}

// string msgType = 2;
inline void ProtoIMAppRecvMessage::clear_msgtype() {
  msgtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppRecvMessage::msgtype() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppRecvMessage.msgType)
  return _internal_msgtype();
}
inline void ProtoIMAppRecvMessage::set_msgtype(const std::string& value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppRecvMessage.msgType)
}
inline std::string* ProtoIMAppRecvMessage::mutable_msgtype() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppRecvMessage.msgType)
  return _internal_mutable_msgtype();
}
inline const std::string& ProtoIMAppRecvMessage::_internal_msgtype() const {
  return msgtype_.GetNoArena();
}
inline void ProtoIMAppRecvMessage::_internal_set_msgtype(const std::string& value) {
  
  msgtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppRecvMessage::set_msgtype(std::string&& value) {
  
  msgtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppRecvMessage.msgType)
}
inline void ProtoIMAppRecvMessage::set_msgtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msgtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppRecvMessage.msgType)
}
inline void ProtoIMAppRecvMessage::set_msgtype(const char* value, size_t size) {
  
  msgtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppRecvMessage.msgType)
}
inline std::string* ProtoIMAppRecvMessage::_internal_mutable_msgtype() {
  
  return msgtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppRecvMessage::release_msgtype() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppRecvMessage.msgType)
  
  return msgtype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppRecvMessage::set_allocated_msgtype(std::string* msgtype) {
  if (msgtype != nullptr) {
    
  } else {
    
  }
  msgtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msgtype);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppRecvMessage.msgType)
}

// string fromId = 3;
inline void ProtoIMAppRecvMessage::clear_fromid() {
  fromid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppRecvMessage::fromid() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppRecvMessage.fromId)
  return _internal_fromid();
}
inline void ProtoIMAppRecvMessage::set_fromid(const std::string& value) {
  _internal_set_fromid(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppRecvMessage.fromId)
}
inline std::string* ProtoIMAppRecvMessage::mutable_fromid() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppRecvMessage.fromId)
  return _internal_mutable_fromid();
}
inline const std::string& ProtoIMAppRecvMessage::_internal_fromid() const {
  return fromid_.GetNoArena();
}
inline void ProtoIMAppRecvMessage::_internal_set_fromid(const std::string& value) {
  
  fromid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppRecvMessage::set_fromid(std::string&& value) {
  
  fromid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppRecvMessage.fromId)
}
inline void ProtoIMAppRecvMessage::set_fromid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fromid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppRecvMessage.fromId)
}
inline void ProtoIMAppRecvMessage::set_fromid(const char* value, size_t size) {
  
  fromid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppRecvMessage.fromId)
}
inline std::string* ProtoIMAppRecvMessage::_internal_mutable_fromid() {
  
  return fromid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppRecvMessage::release_fromid() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppRecvMessage.fromId)
  
  return fromid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppRecvMessage::set_allocated_fromid(std::string* fromid) {
  if (fromid != nullptr) {
    
  } else {
    
  }
  fromid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fromid);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppRecvMessage.fromId)
}

// string convId = 4;
inline void ProtoIMAppRecvMessage::clear_convid() {
  convid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppRecvMessage::convid() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppRecvMessage.convId)
  return _internal_convid();
}
inline void ProtoIMAppRecvMessage::set_convid(const std::string& value) {
  _internal_set_convid(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppRecvMessage.convId)
}
inline std::string* ProtoIMAppRecvMessage::mutable_convid() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppRecvMessage.convId)
  return _internal_mutable_convid();
}
inline const std::string& ProtoIMAppRecvMessage::_internal_convid() const {
  return convid_.GetNoArena();
}
inline void ProtoIMAppRecvMessage::_internal_set_convid(const std::string& value) {
  
  convid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppRecvMessage::set_convid(std::string&& value) {
  
  convid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppRecvMessage.convId)
}
inline void ProtoIMAppRecvMessage::set_convid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  convid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppRecvMessage.convId)
}
inline void ProtoIMAppRecvMessage::set_convid(const char* value, size_t size) {
  
  convid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppRecvMessage.convId)
}
inline std::string* ProtoIMAppRecvMessage::_internal_mutable_convid() {
  
  return convid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppRecvMessage::release_convid() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppRecvMessage.convId)
  
  return convid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppRecvMessage::set_allocated_convid(std::string* convid) {
  if (convid != nullptr) {
    
  } else {
    
  }
  convid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), convid);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppRecvMessage.convId)
}

// string content = 5;
inline void ProtoIMAppRecvMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppRecvMessage::content() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppRecvMessage.content)
  return _internal_content();
}
inline void ProtoIMAppRecvMessage::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppRecvMessage.content)
}
inline std::string* ProtoIMAppRecvMessage::mutable_content() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppRecvMessage.content)
  return _internal_mutable_content();
}
inline const std::string& ProtoIMAppRecvMessage::_internal_content() const {
  return content_.GetNoArena();
}
inline void ProtoIMAppRecvMessage::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppRecvMessage::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppRecvMessage.content)
}
inline void ProtoIMAppRecvMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppRecvMessage.content)
}
inline void ProtoIMAppRecvMessage::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppRecvMessage.content)
}
inline std::string* ProtoIMAppRecvMessage::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppRecvMessage::release_content() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppRecvMessage.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppRecvMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppRecvMessage.content)
}

// string msgId = 6;
inline void ProtoIMAppRecvMessage::clear_msgid() {
  msgid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppRecvMessage::msgid() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppRecvMessage.msgId)
  return _internal_msgid();
}
inline void ProtoIMAppRecvMessage::set_msgid(const std::string& value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppRecvMessage.msgId)
}
inline std::string* ProtoIMAppRecvMessage::mutable_msgid() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppRecvMessage.msgId)
  return _internal_mutable_msgid();
}
inline const std::string& ProtoIMAppRecvMessage::_internal_msgid() const {
  return msgid_.GetNoArena();
}
inline void ProtoIMAppRecvMessage::_internal_set_msgid(const std::string& value) {
  
  msgid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppRecvMessage::set_msgid(std::string&& value) {
  
  msgid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppRecvMessage.msgId)
}
inline void ProtoIMAppRecvMessage::set_msgid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msgid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppRecvMessage.msgId)
}
inline void ProtoIMAppRecvMessage::set_msgid(const char* value, size_t size) {
  
  msgid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppRecvMessage.msgId)
}
inline std::string* ProtoIMAppRecvMessage::_internal_mutable_msgid() {
  
  return msgid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppRecvMessage::release_msgid() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppRecvMessage.msgId)
  
  return msgid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppRecvMessage::set_allocated_msgid(std::string* msgid) {
  if (msgid != nullptr) {
    
  } else {
    
  }
  msgid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msgid);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppRecvMessage.msgId)
}

// int64 timestamp = 7;
inline void ProtoIMAppRecvMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtoIMAppRecvMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtoIMAppRecvMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppRecvMessage.timestamp)
  return _internal_timestamp();
}
inline void ProtoIMAppRecvMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ProtoIMAppRecvMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppRecvMessage.timestamp)
}

// -------------------------------------------------------------------

// ProtoIMAppRecvMessages

// repeated .im.citylife.proto.ProtoIMAppRecvMessage msgs = 1;
inline int ProtoIMAppRecvMessages::_internal_msgs_size() const {
  return msgs_.size();
}
inline int ProtoIMAppRecvMessages::msgs_size() const {
  return _internal_msgs_size();
}
inline void ProtoIMAppRecvMessages::clear_msgs() {
  msgs_.Clear();
}
inline ::im::citylife::proto::ProtoIMAppRecvMessage* ProtoIMAppRecvMessages::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppRecvMessages.msgs)
  return msgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::citylife::proto::ProtoIMAppRecvMessage >*
ProtoIMAppRecvMessages::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:im.citylife.proto.ProtoIMAppRecvMessages.msgs)
  return &msgs_;
}
inline const ::im::citylife::proto::ProtoIMAppRecvMessage& ProtoIMAppRecvMessages::_internal_msgs(int index) const {
  return msgs_.Get(index);
}
inline const ::im::citylife::proto::ProtoIMAppRecvMessage& ProtoIMAppRecvMessages::msgs(int index) const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppRecvMessages.msgs)
  return _internal_msgs(index);
}
inline ::im::citylife::proto::ProtoIMAppRecvMessage* ProtoIMAppRecvMessages::_internal_add_msgs() {
  return msgs_.Add();
}
inline ::im::citylife::proto::ProtoIMAppRecvMessage* ProtoIMAppRecvMessages::add_msgs() {
  // @@protoc_insertion_point(field_add:im.citylife.proto.ProtoIMAppRecvMessages.msgs)
  return _internal_add_msgs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::citylife::proto::ProtoIMAppRecvMessage >&
ProtoIMAppRecvMessages::msgs() const {
  // @@protoc_insertion_point(field_list:im.citylife.proto.ProtoIMAppRecvMessages.msgs)
  return msgs_;
}

// -------------------------------------------------------------------

// ProtoIMAppSendMessage

// string uuid = 1;
inline void ProtoIMAppSendMessage::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppSendMessage::uuid() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppSendMessage.uuid)
  return _internal_uuid();
}
inline void ProtoIMAppSendMessage::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppSendMessage.uuid)
}
inline std::string* ProtoIMAppSendMessage::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppSendMessage.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& ProtoIMAppSendMessage::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void ProtoIMAppSendMessage::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppSendMessage::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppSendMessage.uuid)
}
inline void ProtoIMAppSendMessage::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppSendMessage.uuid)
}
inline void ProtoIMAppSendMessage::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppSendMessage.uuid)
}
inline std::string* ProtoIMAppSendMessage::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppSendMessage::release_uuid() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppSendMessage.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppSendMessage::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppSendMessage.uuid)
}

// string type = 2;
inline void ProtoIMAppSendMessage::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppSendMessage::type() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppSendMessage.type)
  return _internal_type();
}
inline void ProtoIMAppSendMessage::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppSendMessage.type)
}
inline std::string* ProtoIMAppSendMessage::mutable_type() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppSendMessage.type)
  return _internal_mutable_type();
}
inline const std::string& ProtoIMAppSendMessage::_internal_type() const {
  return type_.GetNoArena();
}
inline void ProtoIMAppSendMessage::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppSendMessage::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppSendMessage.type)
}
inline void ProtoIMAppSendMessage::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppSendMessage.type)
}
inline void ProtoIMAppSendMessage::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppSendMessage.type)
}
inline std::string* ProtoIMAppSendMessage::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppSendMessage::release_type() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppSendMessage.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppSendMessage::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppSendMessage.type)
}

// string content = 3;
inline void ProtoIMAppSendMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppSendMessage::content() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppSendMessage.content)
  return _internal_content();
}
inline void ProtoIMAppSendMessage::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppSendMessage.content)
}
inline std::string* ProtoIMAppSendMessage::mutable_content() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppSendMessage.content)
  return _internal_mutable_content();
}
inline const std::string& ProtoIMAppSendMessage::_internal_content() const {
  return content_.GetNoArena();
}
inline void ProtoIMAppSendMessage::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppSendMessage::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppSendMessage.content)
}
inline void ProtoIMAppSendMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppSendMessage.content)
}
inline void ProtoIMAppSendMessage::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppSendMessage.content)
}
inline std::string* ProtoIMAppSendMessage::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppSendMessage::release_content() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppSendMessage.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppSendMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppSendMessage.content)
}

// .im.citylife.proto.ProtoIMAppPushInfo pushInfo = 4;
inline bool ProtoIMAppSendMessage::_internal_has_pushinfo() const {
  return this != internal_default_instance() && pushinfo_ != nullptr;
}
inline bool ProtoIMAppSendMessage::has_pushinfo() const {
  return _internal_has_pushinfo();
}
inline void ProtoIMAppSendMessage::clear_pushinfo() {
  if (GetArenaNoVirtual() == nullptr && pushinfo_ != nullptr) {
    delete pushinfo_;
  }
  pushinfo_ = nullptr;
}
inline const ::im::citylife::proto::ProtoIMAppPushInfo& ProtoIMAppSendMessage::_internal_pushinfo() const {
  const ::im::citylife::proto::ProtoIMAppPushInfo* p = pushinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::im::citylife::proto::ProtoIMAppPushInfo*>(
      &::im::citylife::proto::_ProtoIMAppPushInfo_default_instance_);
}
inline const ::im::citylife::proto::ProtoIMAppPushInfo& ProtoIMAppSendMessage::pushinfo() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppSendMessage.pushInfo)
  return _internal_pushinfo();
}
inline ::im::citylife::proto::ProtoIMAppPushInfo* ProtoIMAppSendMessage::release_pushinfo() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppSendMessage.pushInfo)
  
  ::im::citylife::proto::ProtoIMAppPushInfo* temp = pushinfo_;
  pushinfo_ = nullptr;
  return temp;
}
inline ::im::citylife::proto::ProtoIMAppPushInfo* ProtoIMAppSendMessage::_internal_mutable_pushinfo() {
  
  if (pushinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::citylife::proto::ProtoIMAppPushInfo>(GetArenaNoVirtual());
    pushinfo_ = p;
  }
  return pushinfo_;
}
inline ::im::citylife::proto::ProtoIMAppPushInfo* ProtoIMAppSendMessage::mutable_pushinfo() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppSendMessage.pushInfo)
  return _internal_mutable_pushinfo();
}
inline void ProtoIMAppSendMessage::set_allocated_pushinfo(::im::citylife::proto::ProtoIMAppPushInfo* pushinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pushinfo_;
  }
  if (pushinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pushinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pushinfo, submessage_arena);
    }
    
  } else {
    
  }
  pushinfo_ = pushinfo;
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppSendMessage.pushInfo)
}

// .im.citylife.proto.ProtoIMAppSendMessageAsyncInfo asyncInfo = 5;
inline bool ProtoIMAppSendMessage::_internal_has_asyncinfo() const {
  return this != internal_default_instance() && asyncinfo_ != nullptr;
}
inline bool ProtoIMAppSendMessage::has_asyncinfo() const {
  return _internal_has_asyncinfo();
}
inline void ProtoIMAppSendMessage::clear_asyncinfo() {
  if (GetArenaNoVirtual() == nullptr && asyncinfo_ != nullptr) {
    delete asyncinfo_;
  }
  asyncinfo_ = nullptr;
}
inline const ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo& ProtoIMAppSendMessage::_internal_asyncinfo() const {
  const ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* p = asyncinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo*>(
      &::im::citylife::proto::_ProtoIMAppSendMessageAsyncInfo_default_instance_);
}
inline const ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo& ProtoIMAppSendMessage::asyncinfo() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppSendMessage.asyncInfo)
  return _internal_asyncinfo();
}
inline ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* ProtoIMAppSendMessage::release_asyncinfo() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppSendMessage.asyncInfo)
  
  ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* temp = asyncinfo_;
  asyncinfo_ = nullptr;
  return temp;
}
inline ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* ProtoIMAppSendMessage::_internal_mutable_asyncinfo() {
  
  if (asyncinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo>(GetArenaNoVirtual());
    asyncinfo_ = p;
  }
  return asyncinfo_;
}
inline ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* ProtoIMAppSendMessage::mutable_asyncinfo() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppSendMessage.asyncInfo)
  return _internal_mutable_asyncinfo();
}
inline void ProtoIMAppSendMessage::set_allocated_asyncinfo(::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* asyncinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete asyncinfo_;
  }
  if (asyncinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      asyncinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asyncinfo, submessage_arena);
    }
    
  } else {
    
  }
  asyncinfo_ = asyncinfo;
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppSendMessage.asyncInfo)
}

// -------------------------------------------------------------------

// ProtoIMAppPushInfo

// string pushContent = 1;
inline void ProtoIMAppPushInfo::clear_pushcontent() {
  pushcontent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppPushInfo::pushcontent() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppPushInfo.pushContent)
  return _internal_pushcontent();
}
inline void ProtoIMAppPushInfo::set_pushcontent(const std::string& value) {
  _internal_set_pushcontent(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppPushInfo.pushContent)
}
inline std::string* ProtoIMAppPushInfo::mutable_pushcontent() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppPushInfo.pushContent)
  return _internal_mutable_pushcontent();
}
inline const std::string& ProtoIMAppPushInfo::_internal_pushcontent() const {
  return pushcontent_.GetNoArena();
}
inline void ProtoIMAppPushInfo::_internal_set_pushcontent(const std::string& value) {
  
  pushcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppPushInfo::set_pushcontent(std::string&& value) {
  
  pushcontent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppPushInfo.pushContent)
}
inline void ProtoIMAppPushInfo::set_pushcontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pushcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppPushInfo.pushContent)
}
inline void ProtoIMAppPushInfo::set_pushcontent(const char* value, size_t size) {
  
  pushcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppPushInfo.pushContent)
}
inline std::string* ProtoIMAppPushInfo::_internal_mutable_pushcontent() {
  
  return pushcontent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppPushInfo::release_pushcontent() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppPushInfo.pushContent)
  
  return pushcontent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppPushInfo::set_allocated_pushcontent(std::string* pushcontent) {
  if (pushcontent != nullptr) {
    
  } else {
    
  }
  pushcontent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pushcontent);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppPushInfo.pushContent)
}

// string pushData = 2;
inline void ProtoIMAppPushInfo::clear_pushdata() {
  pushdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppPushInfo::pushdata() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppPushInfo.pushData)
  return _internal_pushdata();
}
inline void ProtoIMAppPushInfo::set_pushdata(const std::string& value) {
  _internal_set_pushdata(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppPushInfo.pushData)
}
inline std::string* ProtoIMAppPushInfo::mutable_pushdata() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppPushInfo.pushData)
  return _internal_mutable_pushdata();
}
inline const std::string& ProtoIMAppPushInfo::_internal_pushdata() const {
  return pushdata_.GetNoArena();
}
inline void ProtoIMAppPushInfo::_internal_set_pushdata(const std::string& value) {
  
  pushdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppPushInfo::set_pushdata(std::string&& value) {
  
  pushdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppPushInfo.pushData)
}
inline void ProtoIMAppPushInfo::set_pushdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pushdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppPushInfo.pushData)
}
inline void ProtoIMAppPushInfo::set_pushdata(const char* value, size_t size) {
  
  pushdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppPushInfo.pushData)
}
inline std::string* ProtoIMAppPushInfo::_internal_mutable_pushdata() {
  
  return pushdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppPushInfo::release_pushdata() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppPushInfo.pushData)
  
  return pushdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppPushInfo::set_allocated_pushdata(std::string* pushdata) {
  if (pushdata != nullptr) {
    
  } else {
    
  }
  pushdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pushdata);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppPushInfo.pushData)
}

// string pushTitle = 3;
inline void ProtoIMAppPushInfo::clear_pushtitle() {
  pushtitle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppPushInfo::pushtitle() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppPushInfo.pushTitle)
  return _internal_pushtitle();
}
inline void ProtoIMAppPushInfo::set_pushtitle(const std::string& value) {
  _internal_set_pushtitle(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppPushInfo.pushTitle)
}
inline std::string* ProtoIMAppPushInfo::mutable_pushtitle() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppPushInfo.pushTitle)
  return _internal_mutable_pushtitle();
}
inline const std::string& ProtoIMAppPushInfo::_internal_pushtitle() const {
  return pushtitle_.GetNoArena();
}
inline void ProtoIMAppPushInfo::_internal_set_pushtitle(const std::string& value) {
  
  pushtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppPushInfo::set_pushtitle(std::string&& value) {
  
  pushtitle_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppPushInfo.pushTitle)
}
inline void ProtoIMAppPushInfo::set_pushtitle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pushtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppPushInfo.pushTitle)
}
inline void ProtoIMAppPushInfo::set_pushtitle(const char* value, size_t size) {
  
  pushtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppPushInfo.pushTitle)
}
inline std::string* ProtoIMAppPushInfo::_internal_mutable_pushtitle() {
  
  return pushtitle_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppPushInfo::release_pushtitle() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppPushInfo.pushTitle)
  
  return pushtitle_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppPushInfo::set_allocated_pushtitle(std::string* pushtitle) {
  if (pushtitle != nullptr) {
    
  } else {
    
  }
  pushtitle_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pushtitle);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppPushInfo.pushTitle)
}

// string pushSubtitle = 4;
inline void ProtoIMAppPushInfo::clear_pushsubtitle() {
  pushsubtitle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppPushInfo::pushsubtitle() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppPushInfo.pushSubtitle)
  return _internal_pushsubtitle();
}
inline void ProtoIMAppPushInfo::set_pushsubtitle(const std::string& value) {
  _internal_set_pushsubtitle(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppPushInfo.pushSubtitle)
}
inline std::string* ProtoIMAppPushInfo::mutable_pushsubtitle() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppPushInfo.pushSubtitle)
  return _internal_mutable_pushsubtitle();
}
inline const std::string& ProtoIMAppPushInfo::_internal_pushsubtitle() const {
  return pushsubtitle_.GetNoArena();
}
inline void ProtoIMAppPushInfo::_internal_set_pushsubtitle(const std::string& value) {
  
  pushsubtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppPushInfo::set_pushsubtitle(std::string&& value) {
  
  pushsubtitle_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppPushInfo.pushSubtitle)
}
inline void ProtoIMAppPushInfo::set_pushsubtitle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pushsubtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppPushInfo.pushSubtitle)
}
inline void ProtoIMAppPushInfo::set_pushsubtitle(const char* value, size_t size) {
  
  pushsubtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppPushInfo.pushSubtitle)
}
inline std::string* ProtoIMAppPushInfo::_internal_mutable_pushsubtitle() {
  
  return pushsubtitle_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppPushInfo::release_pushsubtitle() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppPushInfo.pushSubtitle)
  
  return pushsubtitle_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppPushInfo::set_allocated_pushsubtitle(std::string* pushsubtitle) {
  if (pushsubtitle != nullptr) {
    
  } else {
    
  }
  pushsubtitle_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pushsubtitle);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppPushInfo.pushSubtitle)
}

// string pushSound = 5;
inline void ProtoIMAppPushInfo::clear_pushsound() {
  pushsound_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppPushInfo::pushsound() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppPushInfo.pushSound)
  return _internal_pushsound();
}
inline void ProtoIMAppPushInfo::set_pushsound(const std::string& value) {
  _internal_set_pushsound(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppPushInfo.pushSound)
}
inline std::string* ProtoIMAppPushInfo::mutable_pushsound() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppPushInfo.pushSound)
  return _internal_mutable_pushsound();
}
inline const std::string& ProtoIMAppPushInfo::_internal_pushsound() const {
  return pushsound_.GetNoArena();
}
inline void ProtoIMAppPushInfo::_internal_set_pushsound(const std::string& value) {
  
  pushsound_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppPushInfo::set_pushsound(std::string&& value) {
  
  pushsound_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppPushInfo.pushSound)
}
inline void ProtoIMAppPushInfo::set_pushsound(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pushsound_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppPushInfo.pushSound)
}
inline void ProtoIMAppPushInfo::set_pushsound(const char* value, size_t size) {
  
  pushsound_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppPushInfo.pushSound)
}
inline std::string* ProtoIMAppPushInfo::_internal_mutable_pushsound() {
  
  return pushsound_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppPushInfo::release_pushsound() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppPushInfo.pushSound)
  
  return pushsound_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppPushInfo::set_allocated_pushsound(std::string* pushsound) {
  if (pushsound != nullptr) {
    
  } else {
    
  }
  pushsound_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pushsound);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppPushInfo.pushSound)
}

// -------------------------------------------------------------------

// ProtoIMAppSendMessageAsyncInfo

// string uuid = 1;
inline void ProtoIMAppSendMessageAsyncInfo::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppSendMessageAsyncInfo::uuid() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.uuid)
  return _internal_uuid();
}
inline void ProtoIMAppSendMessageAsyncInfo::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.uuid)
}
inline std::string* ProtoIMAppSendMessageAsyncInfo::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& ProtoIMAppSendMessageAsyncInfo::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void ProtoIMAppSendMessageAsyncInfo::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppSendMessageAsyncInfo::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.uuid)
}
inline void ProtoIMAppSendMessageAsyncInfo::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.uuid)
}
inline void ProtoIMAppSendMessageAsyncInfo::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.uuid)
}
inline std::string* ProtoIMAppSendMessageAsyncInfo::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppSendMessageAsyncInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppSendMessageAsyncInfo::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.uuid)
}

// string localPath = 2;
inline void ProtoIMAppSendMessageAsyncInfo::clear_localpath() {
  localpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppSendMessageAsyncInfo::localpath() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.localPath)
  return _internal_localpath();
}
inline void ProtoIMAppSendMessageAsyncInfo::set_localpath(const std::string& value) {
  _internal_set_localpath(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.localPath)
}
inline std::string* ProtoIMAppSendMessageAsyncInfo::mutable_localpath() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.localPath)
  return _internal_mutable_localpath();
}
inline const std::string& ProtoIMAppSendMessageAsyncInfo::_internal_localpath() const {
  return localpath_.GetNoArena();
}
inline void ProtoIMAppSendMessageAsyncInfo::_internal_set_localpath(const std::string& value) {
  
  localpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppSendMessageAsyncInfo::set_localpath(std::string&& value) {
  
  localpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.localPath)
}
inline void ProtoIMAppSendMessageAsyncInfo::set_localpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  localpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.localPath)
}
inline void ProtoIMAppSendMessageAsyncInfo::set_localpath(const char* value, size_t size) {
  
  localpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.localPath)
}
inline std::string* ProtoIMAppSendMessageAsyncInfo::_internal_mutable_localpath() {
  
  return localpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppSendMessageAsyncInfo::release_localpath() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.localPath)
  
  return localpath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppSendMessageAsyncInfo::set_allocated_localpath(std::string* localpath) {
  if (localpath != nullptr) {
    
  } else {
    
  }
  localpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localpath);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.localPath)
}

// string serverUrl = 3;
inline void ProtoIMAppSendMessageAsyncInfo::clear_serverurl() {
  serverurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppSendMessageAsyncInfo::serverurl() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.serverUrl)
  return _internal_serverurl();
}
inline void ProtoIMAppSendMessageAsyncInfo::set_serverurl(const std::string& value) {
  _internal_set_serverurl(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.serverUrl)
}
inline std::string* ProtoIMAppSendMessageAsyncInfo::mutable_serverurl() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.serverUrl)
  return _internal_mutable_serverurl();
}
inline const std::string& ProtoIMAppSendMessageAsyncInfo::_internal_serverurl() const {
  return serverurl_.GetNoArena();
}
inline void ProtoIMAppSendMessageAsyncInfo::_internal_set_serverurl(const std::string& value) {
  
  serverurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppSendMessageAsyncInfo::set_serverurl(std::string&& value) {
  
  serverurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.serverUrl)
}
inline void ProtoIMAppSendMessageAsyncInfo::set_serverurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serverurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.serverUrl)
}
inline void ProtoIMAppSendMessageAsyncInfo::set_serverurl(const char* value, size_t size) {
  
  serverurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.serverUrl)
}
inline std::string* ProtoIMAppSendMessageAsyncInfo::_internal_mutable_serverurl() {
  
  return serverurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppSendMessageAsyncInfo::release_serverurl() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.serverUrl)
  
  return serverurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppSendMessageAsyncInfo::set_allocated_serverurl(std::string* serverurl) {
  if (serverurl != nullptr) {
    
  } else {
    
  }
  serverurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverurl);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.serverUrl)
}

// string fileType = 4;
inline void ProtoIMAppSendMessageAsyncInfo::clear_filetype() {
  filetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppSendMessageAsyncInfo::filetype() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.fileType)
  return _internal_filetype();
}
inline void ProtoIMAppSendMessageAsyncInfo::set_filetype(const std::string& value) {
  _internal_set_filetype(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.fileType)
}
inline std::string* ProtoIMAppSendMessageAsyncInfo::mutable_filetype() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.fileType)
  return _internal_mutable_filetype();
}
inline const std::string& ProtoIMAppSendMessageAsyncInfo::_internal_filetype() const {
  return filetype_.GetNoArena();
}
inline void ProtoIMAppSendMessageAsyncInfo::_internal_set_filetype(const std::string& value) {
  
  filetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppSendMessageAsyncInfo::set_filetype(std::string&& value) {
  
  filetype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.fileType)
}
inline void ProtoIMAppSendMessageAsyncInfo::set_filetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.fileType)
}
inline void ProtoIMAppSendMessageAsyncInfo::set_filetype(const char* value, size_t size) {
  
  filetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.fileType)
}
inline std::string* ProtoIMAppSendMessageAsyncInfo::_internal_mutable_filetype() {
  
  return filetype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppSendMessageAsyncInfo::release_filetype() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.fileType)
  
  return filetype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppSendMessageAsyncInfo::set_allocated_filetype(std::string* filetype) {
  if (filetype != nullptr) {
    
  } else {
    
  }
  filetype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filetype);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.fileType)
}

// int64 timestamp = 5;
inline void ProtoIMAppSendMessageAsyncInfo::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtoIMAppSendMessageAsyncInfo::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtoIMAppSendMessageAsyncInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.timestamp)
  return _internal_timestamp();
}
inline void ProtoIMAppSendMessageAsyncInfo::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ProtoIMAppSendMessageAsyncInfo::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppSendMessageAsyncInfo.timestamp)
}

// -------------------------------------------------------------------

// ProtoIMAppDownloadFileInfo

// string msgId = 1;
inline void ProtoIMAppDownloadFileInfo::clear_msgid() {
  msgid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppDownloadFileInfo::msgid() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppDownloadFileInfo.msgId)
  return _internal_msgid();
}
inline void ProtoIMAppDownloadFileInfo::set_msgid(const std::string& value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppDownloadFileInfo.msgId)
}
inline std::string* ProtoIMAppDownloadFileInfo::mutable_msgid() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppDownloadFileInfo.msgId)
  return _internal_mutable_msgid();
}
inline const std::string& ProtoIMAppDownloadFileInfo::_internal_msgid() const {
  return msgid_.GetNoArena();
}
inline void ProtoIMAppDownloadFileInfo::_internal_set_msgid(const std::string& value) {
  
  msgid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppDownloadFileInfo::set_msgid(std::string&& value) {
  
  msgid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppDownloadFileInfo.msgId)
}
inline void ProtoIMAppDownloadFileInfo::set_msgid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msgid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppDownloadFileInfo.msgId)
}
inline void ProtoIMAppDownloadFileInfo::set_msgid(const char* value, size_t size) {
  
  msgid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppDownloadFileInfo.msgId)
}
inline std::string* ProtoIMAppDownloadFileInfo::_internal_mutable_msgid() {
  
  return msgid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppDownloadFileInfo::release_msgid() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppDownloadFileInfo.msgId)
  
  return msgid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppDownloadFileInfo::set_allocated_msgid(std::string* msgid) {
  if (msgid != nullptr) {
    
  } else {
    
  }
  msgid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msgid);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppDownloadFileInfo.msgId)
}

// string senderId = 2;
inline void ProtoIMAppDownloadFileInfo::clear_senderid() {
  senderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppDownloadFileInfo::senderid() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppDownloadFileInfo.senderId)
  return _internal_senderid();
}
inline void ProtoIMAppDownloadFileInfo::set_senderid(const std::string& value) {
  _internal_set_senderid(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppDownloadFileInfo.senderId)
}
inline std::string* ProtoIMAppDownloadFileInfo::mutable_senderid() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppDownloadFileInfo.senderId)
  return _internal_mutable_senderid();
}
inline const std::string& ProtoIMAppDownloadFileInfo::_internal_senderid() const {
  return senderid_.GetNoArena();
}
inline void ProtoIMAppDownloadFileInfo::_internal_set_senderid(const std::string& value) {
  
  senderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppDownloadFileInfo::set_senderid(std::string&& value) {
  
  senderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppDownloadFileInfo.senderId)
}
inline void ProtoIMAppDownloadFileInfo::set_senderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  senderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppDownloadFileInfo.senderId)
}
inline void ProtoIMAppDownloadFileInfo::set_senderid(const char* value, size_t size) {
  
  senderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppDownloadFileInfo.senderId)
}
inline std::string* ProtoIMAppDownloadFileInfo::_internal_mutable_senderid() {
  
  return senderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppDownloadFileInfo::release_senderid() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppDownloadFileInfo.senderId)
  
  return senderid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppDownloadFileInfo::set_allocated_senderid(std::string* senderid) {
  if (senderid != nullptr) {
    
  } else {
    
  }
  senderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), senderid);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppDownloadFileInfo.senderId)
}

// string fileId = 3;
inline void ProtoIMAppDownloadFileInfo::clear_fileid() {
  fileid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppDownloadFileInfo::fileid() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppDownloadFileInfo.fileId)
  return _internal_fileid();
}
inline void ProtoIMAppDownloadFileInfo::set_fileid(const std::string& value) {
  _internal_set_fileid(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppDownloadFileInfo.fileId)
}
inline std::string* ProtoIMAppDownloadFileInfo::mutable_fileid() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppDownloadFileInfo.fileId)
  return _internal_mutable_fileid();
}
inline const std::string& ProtoIMAppDownloadFileInfo::_internal_fileid() const {
  return fileid_.GetNoArena();
}
inline void ProtoIMAppDownloadFileInfo::_internal_set_fileid(const std::string& value) {
  
  fileid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppDownloadFileInfo::set_fileid(std::string&& value) {
  
  fileid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppDownloadFileInfo.fileId)
}
inline void ProtoIMAppDownloadFileInfo::set_fileid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fileid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppDownloadFileInfo.fileId)
}
inline void ProtoIMAppDownloadFileInfo::set_fileid(const char* value, size_t size) {
  
  fileid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppDownloadFileInfo.fileId)
}
inline std::string* ProtoIMAppDownloadFileInfo::_internal_mutable_fileid() {
  
  return fileid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppDownloadFileInfo::release_fileid() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppDownloadFileInfo.fileId)
  
  return fileid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppDownloadFileInfo::set_allocated_fileid(std::string* fileid) {
  if (fileid != nullptr) {
    
  } else {
    
  }
  fileid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fileid);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppDownloadFileInfo.fileId)
}

// string localPath = 4;
inline void ProtoIMAppDownloadFileInfo::clear_localpath() {
  localpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppDownloadFileInfo::localpath() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppDownloadFileInfo.localPath)
  return _internal_localpath();
}
inline void ProtoIMAppDownloadFileInfo::set_localpath(const std::string& value) {
  _internal_set_localpath(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppDownloadFileInfo.localPath)
}
inline std::string* ProtoIMAppDownloadFileInfo::mutable_localpath() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppDownloadFileInfo.localPath)
  return _internal_mutable_localpath();
}
inline const std::string& ProtoIMAppDownloadFileInfo::_internal_localpath() const {
  return localpath_.GetNoArena();
}
inline void ProtoIMAppDownloadFileInfo::_internal_set_localpath(const std::string& value) {
  
  localpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppDownloadFileInfo::set_localpath(std::string&& value) {
  
  localpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppDownloadFileInfo.localPath)
}
inline void ProtoIMAppDownloadFileInfo::set_localpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  localpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppDownloadFileInfo.localPath)
}
inline void ProtoIMAppDownloadFileInfo::set_localpath(const char* value, size_t size) {
  
  localpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppDownloadFileInfo.localPath)
}
inline std::string* ProtoIMAppDownloadFileInfo::_internal_mutable_localpath() {
  
  return localpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppDownloadFileInfo::release_localpath() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppDownloadFileInfo.localPath)
  
  return localpath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppDownloadFileInfo::set_allocated_localpath(std::string* localpath) {
  if (localpath != nullptr) {
    
  } else {
    
  }
  localpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localpath);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppDownloadFileInfo.localPath)
}

// string url = 5;
inline void ProtoIMAppDownloadFileInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppDownloadFileInfo::url() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppDownloadFileInfo.url)
  return _internal_url();
}
inline void ProtoIMAppDownloadFileInfo::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppDownloadFileInfo.url)
}
inline std::string* ProtoIMAppDownloadFileInfo::mutable_url() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppDownloadFileInfo.url)
  return _internal_mutable_url();
}
inline const std::string& ProtoIMAppDownloadFileInfo::_internal_url() const {
  return url_.GetNoArena();
}
inline void ProtoIMAppDownloadFileInfo::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppDownloadFileInfo::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppDownloadFileInfo.url)
}
inline void ProtoIMAppDownloadFileInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppDownloadFileInfo.url)
}
inline void ProtoIMAppDownloadFileInfo::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppDownloadFileInfo.url)
}
inline std::string* ProtoIMAppDownloadFileInfo::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppDownloadFileInfo::release_url() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppDownloadFileInfo.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppDownloadFileInfo::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppDownloadFileInfo.url)
}

// string fileType = 6;
inline void ProtoIMAppDownloadFileInfo::clear_filetype() {
  filetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMAppDownloadFileInfo::filetype() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppDownloadFileInfo.fileType)
  return _internal_filetype();
}
inline void ProtoIMAppDownloadFileInfo::set_filetype(const std::string& value) {
  _internal_set_filetype(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppDownloadFileInfo.fileType)
}
inline std::string* ProtoIMAppDownloadFileInfo::mutable_filetype() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMAppDownloadFileInfo.fileType)
  return _internal_mutable_filetype();
}
inline const std::string& ProtoIMAppDownloadFileInfo::_internal_filetype() const {
  return filetype_.GetNoArena();
}
inline void ProtoIMAppDownloadFileInfo::_internal_set_filetype(const std::string& value) {
  
  filetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMAppDownloadFileInfo::set_filetype(std::string&& value) {
  
  filetype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMAppDownloadFileInfo.fileType)
}
inline void ProtoIMAppDownloadFileInfo::set_filetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMAppDownloadFileInfo.fileType)
}
inline void ProtoIMAppDownloadFileInfo::set_filetype(const char* value, size_t size) {
  
  filetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMAppDownloadFileInfo.fileType)
}
inline std::string* ProtoIMAppDownloadFileInfo::_internal_mutable_filetype() {
  
  return filetype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMAppDownloadFileInfo::release_filetype() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMAppDownloadFileInfo.fileType)
  
  return filetype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMAppDownloadFileInfo::set_allocated_filetype(std::string* filetype) {
  if (filetype != nullptr) {
    
  } else {
    
  }
  filetype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filetype);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMAppDownloadFileInfo.fileType)
}

// int64 timestamp = 7;
inline void ProtoIMAppDownloadFileInfo::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtoIMAppDownloadFileInfo::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtoIMAppDownloadFileInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMAppDownloadFileInfo.timestamp)
  return _internal_timestamp();
}
inline void ProtoIMAppDownloadFileInfo::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ProtoIMAppDownloadFileInfo::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMAppDownloadFileInfo.timestamp)
}

// -------------------------------------------------------------------

// ProtoIMOfflinePushInfo

// string pushcontent = 1;
inline void ProtoIMOfflinePushInfo::clear_pushcontent() {
  pushcontent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMOfflinePushInfo::pushcontent() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMOfflinePushInfo.pushcontent)
  return _internal_pushcontent();
}
inline void ProtoIMOfflinePushInfo::set_pushcontent(const std::string& value) {
  _internal_set_pushcontent(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMOfflinePushInfo.pushcontent)
}
inline std::string* ProtoIMOfflinePushInfo::mutable_pushcontent() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMOfflinePushInfo.pushcontent)
  return _internal_mutable_pushcontent();
}
inline const std::string& ProtoIMOfflinePushInfo::_internal_pushcontent() const {
  return pushcontent_.GetNoArena();
}
inline void ProtoIMOfflinePushInfo::_internal_set_pushcontent(const std::string& value) {
  
  pushcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMOfflinePushInfo::set_pushcontent(std::string&& value) {
  
  pushcontent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMOfflinePushInfo.pushcontent)
}
inline void ProtoIMOfflinePushInfo::set_pushcontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pushcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMOfflinePushInfo.pushcontent)
}
inline void ProtoIMOfflinePushInfo::set_pushcontent(const char* value, size_t size) {
  
  pushcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMOfflinePushInfo.pushcontent)
}
inline std::string* ProtoIMOfflinePushInfo::_internal_mutable_pushcontent() {
  
  return pushcontent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMOfflinePushInfo::release_pushcontent() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMOfflinePushInfo.pushcontent)
  
  return pushcontent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMOfflinePushInfo::set_allocated_pushcontent(std::string* pushcontent) {
  if (pushcontent != nullptr) {
    
  } else {
    
  }
  pushcontent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pushcontent);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMOfflinePushInfo.pushcontent)
}

// string pushdata = 2;
inline void ProtoIMOfflinePushInfo::clear_pushdata() {
  pushdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMOfflinePushInfo::pushdata() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMOfflinePushInfo.pushdata)
  return _internal_pushdata();
}
inline void ProtoIMOfflinePushInfo::set_pushdata(const std::string& value) {
  _internal_set_pushdata(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMOfflinePushInfo.pushdata)
}
inline std::string* ProtoIMOfflinePushInfo::mutable_pushdata() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMOfflinePushInfo.pushdata)
  return _internal_mutable_pushdata();
}
inline const std::string& ProtoIMOfflinePushInfo::_internal_pushdata() const {
  return pushdata_.GetNoArena();
}
inline void ProtoIMOfflinePushInfo::_internal_set_pushdata(const std::string& value) {
  
  pushdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMOfflinePushInfo::set_pushdata(std::string&& value) {
  
  pushdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMOfflinePushInfo.pushdata)
}
inline void ProtoIMOfflinePushInfo::set_pushdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pushdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMOfflinePushInfo.pushdata)
}
inline void ProtoIMOfflinePushInfo::set_pushdata(const char* value, size_t size) {
  
  pushdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMOfflinePushInfo.pushdata)
}
inline std::string* ProtoIMOfflinePushInfo::_internal_mutable_pushdata() {
  
  return pushdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMOfflinePushInfo::release_pushdata() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMOfflinePushInfo.pushdata)
  
  return pushdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMOfflinePushInfo::set_allocated_pushdata(std::string* pushdata) {
  if (pushdata != nullptr) {
    
  } else {
    
  }
  pushdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pushdata);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMOfflinePushInfo.pushdata)
}

// string pushtitle = 3;
inline void ProtoIMOfflinePushInfo::clear_pushtitle() {
  pushtitle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMOfflinePushInfo::pushtitle() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMOfflinePushInfo.pushtitle)
  return _internal_pushtitle();
}
inline void ProtoIMOfflinePushInfo::set_pushtitle(const std::string& value) {
  _internal_set_pushtitle(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMOfflinePushInfo.pushtitle)
}
inline std::string* ProtoIMOfflinePushInfo::mutable_pushtitle() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMOfflinePushInfo.pushtitle)
  return _internal_mutable_pushtitle();
}
inline const std::string& ProtoIMOfflinePushInfo::_internal_pushtitle() const {
  return pushtitle_.GetNoArena();
}
inline void ProtoIMOfflinePushInfo::_internal_set_pushtitle(const std::string& value) {
  
  pushtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMOfflinePushInfo::set_pushtitle(std::string&& value) {
  
  pushtitle_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMOfflinePushInfo.pushtitle)
}
inline void ProtoIMOfflinePushInfo::set_pushtitle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pushtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMOfflinePushInfo.pushtitle)
}
inline void ProtoIMOfflinePushInfo::set_pushtitle(const char* value, size_t size) {
  
  pushtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMOfflinePushInfo.pushtitle)
}
inline std::string* ProtoIMOfflinePushInfo::_internal_mutable_pushtitle() {
  
  return pushtitle_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMOfflinePushInfo::release_pushtitle() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMOfflinePushInfo.pushtitle)
  
  return pushtitle_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMOfflinePushInfo::set_allocated_pushtitle(std::string* pushtitle) {
  if (pushtitle != nullptr) {
    
  } else {
    
  }
  pushtitle_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pushtitle);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMOfflinePushInfo.pushtitle)
}

// string pushsubtitle = 4;
inline void ProtoIMOfflinePushInfo::clear_pushsubtitle() {
  pushsubtitle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMOfflinePushInfo::pushsubtitle() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMOfflinePushInfo.pushsubtitle)
  return _internal_pushsubtitle();
}
inline void ProtoIMOfflinePushInfo::set_pushsubtitle(const std::string& value) {
  _internal_set_pushsubtitle(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMOfflinePushInfo.pushsubtitle)
}
inline std::string* ProtoIMOfflinePushInfo::mutable_pushsubtitle() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMOfflinePushInfo.pushsubtitle)
  return _internal_mutable_pushsubtitle();
}
inline const std::string& ProtoIMOfflinePushInfo::_internal_pushsubtitle() const {
  return pushsubtitle_.GetNoArena();
}
inline void ProtoIMOfflinePushInfo::_internal_set_pushsubtitle(const std::string& value) {
  
  pushsubtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMOfflinePushInfo::set_pushsubtitle(std::string&& value) {
  
  pushsubtitle_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMOfflinePushInfo.pushsubtitle)
}
inline void ProtoIMOfflinePushInfo::set_pushsubtitle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pushsubtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMOfflinePushInfo.pushsubtitle)
}
inline void ProtoIMOfflinePushInfo::set_pushsubtitle(const char* value, size_t size) {
  
  pushsubtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMOfflinePushInfo.pushsubtitle)
}
inline std::string* ProtoIMOfflinePushInfo::_internal_mutable_pushsubtitle() {
  
  return pushsubtitle_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMOfflinePushInfo::release_pushsubtitle() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMOfflinePushInfo.pushsubtitle)
  
  return pushsubtitle_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMOfflinePushInfo::set_allocated_pushsubtitle(std::string* pushsubtitle) {
  if (pushsubtitle != nullptr) {
    
  } else {
    
  }
  pushsubtitle_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pushsubtitle);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMOfflinePushInfo.pushsubtitle)
}

// string pushsound = 5;
inline void ProtoIMOfflinePushInfo::clear_pushsound() {
  pushsound_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMOfflinePushInfo::pushsound() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMOfflinePushInfo.pushsound)
  return _internal_pushsound();
}
inline void ProtoIMOfflinePushInfo::set_pushsound(const std::string& value) {
  _internal_set_pushsound(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMOfflinePushInfo.pushsound)
}
inline std::string* ProtoIMOfflinePushInfo::mutable_pushsound() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMOfflinePushInfo.pushsound)
  return _internal_mutable_pushsound();
}
inline const std::string& ProtoIMOfflinePushInfo::_internal_pushsound() const {
  return pushsound_.GetNoArena();
}
inline void ProtoIMOfflinePushInfo::_internal_set_pushsound(const std::string& value) {
  
  pushsound_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMOfflinePushInfo::set_pushsound(std::string&& value) {
  
  pushsound_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMOfflinePushInfo.pushsound)
}
inline void ProtoIMOfflinePushInfo::set_pushsound(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pushsound_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMOfflinePushInfo.pushsound)
}
inline void ProtoIMOfflinePushInfo::set_pushsound(const char* value, size_t size) {
  
  pushsound_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMOfflinePushInfo.pushsound)
}
inline std::string* ProtoIMOfflinePushInfo::_internal_mutable_pushsound() {
  
  return pushsound_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMOfflinePushInfo::release_pushsound() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMOfflinePushInfo.pushsound)
  
  return pushsound_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMOfflinePushInfo::set_allocated_pushsound(std::string* pushsound) {
  if (pushsound != nullptr) {
    
  } else {
    
  }
  pushsound_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pushsound);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMOfflinePushInfo.pushsound)
}

// -------------------------------------------------------------------

// ProtoIMSendMessageAsyncInfo

// string uuid = 1;
inline void ProtoIMSendMessageAsyncInfo::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMSendMessageAsyncInfo::uuid() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMSendMessageAsyncInfo.uuid)
  return _internal_uuid();
}
inline void ProtoIMSendMessageAsyncInfo::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMSendMessageAsyncInfo.uuid)
}
inline std::string* ProtoIMSendMessageAsyncInfo::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMSendMessageAsyncInfo.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& ProtoIMSendMessageAsyncInfo::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void ProtoIMSendMessageAsyncInfo::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMSendMessageAsyncInfo::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMSendMessageAsyncInfo.uuid)
}
inline void ProtoIMSendMessageAsyncInfo::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMSendMessageAsyncInfo.uuid)
}
inline void ProtoIMSendMessageAsyncInfo::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMSendMessageAsyncInfo.uuid)
}
inline std::string* ProtoIMSendMessageAsyncInfo::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMSendMessageAsyncInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMSendMessageAsyncInfo.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMSendMessageAsyncInfo::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMSendMessageAsyncInfo.uuid)
}

// string local_path = 2;
inline void ProtoIMSendMessageAsyncInfo::clear_local_path() {
  local_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMSendMessageAsyncInfo::local_path() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMSendMessageAsyncInfo.local_path)
  return _internal_local_path();
}
inline void ProtoIMSendMessageAsyncInfo::set_local_path(const std::string& value) {
  _internal_set_local_path(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMSendMessageAsyncInfo.local_path)
}
inline std::string* ProtoIMSendMessageAsyncInfo::mutable_local_path() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMSendMessageAsyncInfo.local_path)
  return _internal_mutable_local_path();
}
inline const std::string& ProtoIMSendMessageAsyncInfo::_internal_local_path() const {
  return local_path_.GetNoArena();
}
inline void ProtoIMSendMessageAsyncInfo::_internal_set_local_path(const std::string& value) {
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMSendMessageAsyncInfo::set_local_path(std::string&& value) {
  
  local_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMSendMessageAsyncInfo.local_path)
}
inline void ProtoIMSendMessageAsyncInfo::set_local_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMSendMessageAsyncInfo.local_path)
}
inline void ProtoIMSendMessageAsyncInfo::set_local_path(const char* value, size_t size) {
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMSendMessageAsyncInfo.local_path)
}
inline std::string* ProtoIMSendMessageAsyncInfo::_internal_mutable_local_path() {
  
  return local_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMSendMessageAsyncInfo::release_local_path() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMSendMessageAsyncInfo.local_path)
  
  return local_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMSendMessageAsyncInfo::set_allocated_local_path(std::string* local_path) {
  if (local_path != nullptr) {
    
  } else {
    
  }
  local_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_path);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMSendMessageAsyncInfo.local_path)
}

// string url = 3;
inline void ProtoIMSendMessageAsyncInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMSendMessageAsyncInfo::url() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMSendMessageAsyncInfo.url)
  return _internal_url();
}
inline void ProtoIMSendMessageAsyncInfo::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMSendMessageAsyncInfo.url)
}
inline std::string* ProtoIMSendMessageAsyncInfo::mutable_url() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMSendMessageAsyncInfo.url)
  return _internal_mutable_url();
}
inline const std::string& ProtoIMSendMessageAsyncInfo::_internal_url() const {
  return url_.GetNoArena();
}
inline void ProtoIMSendMessageAsyncInfo::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMSendMessageAsyncInfo::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMSendMessageAsyncInfo.url)
}
inline void ProtoIMSendMessageAsyncInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMSendMessageAsyncInfo.url)
}
inline void ProtoIMSendMessageAsyncInfo::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMSendMessageAsyncInfo.url)
}
inline std::string* ProtoIMSendMessageAsyncInfo::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMSendMessageAsyncInfo::release_url() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMSendMessageAsyncInfo.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMSendMessageAsyncInfo::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMSendMessageAsyncInfo.url)
}

// string file_type = 4;
inline void ProtoIMSendMessageAsyncInfo::clear_file_type() {
  file_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMSendMessageAsyncInfo::file_type() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMSendMessageAsyncInfo.file_type)
  return _internal_file_type();
}
inline void ProtoIMSendMessageAsyncInfo::set_file_type(const std::string& value) {
  _internal_set_file_type(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMSendMessageAsyncInfo.file_type)
}
inline std::string* ProtoIMSendMessageAsyncInfo::mutable_file_type() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMSendMessageAsyncInfo.file_type)
  return _internal_mutable_file_type();
}
inline const std::string& ProtoIMSendMessageAsyncInfo::_internal_file_type() const {
  return file_type_.GetNoArena();
}
inline void ProtoIMSendMessageAsyncInfo::_internal_set_file_type(const std::string& value) {
  
  file_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMSendMessageAsyncInfo::set_file_type(std::string&& value) {
  
  file_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMSendMessageAsyncInfo.file_type)
}
inline void ProtoIMSendMessageAsyncInfo::set_file_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMSendMessageAsyncInfo.file_type)
}
inline void ProtoIMSendMessageAsyncInfo::set_file_type(const char* value, size_t size) {
  
  file_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMSendMessageAsyncInfo.file_type)
}
inline std::string* ProtoIMSendMessageAsyncInfo::_internal_mutable_file_type() {
  
  return file_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMSendMessageAsyncInfo::release_file_type() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMSendMessageAsyncInfo.file_type)
  
  return file_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMSendMessageAsyncInfo::set_allocated_file_type(std::string* file_type) {
  if (file_type != nullptr) {
    
  } else {
    
  }
  file_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_type);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMSendMessageAsyncInfo.file_type)
}

// int64 timestamp = 5;
inline void ProtoIMSendMessageAsyncInfo::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtoIMSendMessageAsyncInfo::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtoIMSendMessageAsyncInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMSendMessageAsyncInfo.timestamp)
  return _internal_timestamp();
}
inline void ProtoIMSendMessageAsyncInfo::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ProtoIMSendMessageAsyncInfo::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMSendMessageAsyncInfo.timestamp)
}

// -------------------------------------------------------------------

// ProtoIMSendMessage

// .im.citylife.proto.ProtoIMMessage message = 1;
inline bool ProtoIMSendMessage::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool ProtoIMSendMessage::has_message() const {
  return _internal_has_message();
}
inline void ProtoIMSendMessage::clear_message() {
  if (GetArenaNoVirtual() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::im::citylife::proto::ProtoIMMessage& ProtoIMSendMessage::_internal_message() const {
  const ::im::citylife::proto::ProtoIMMessage* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::im::citylife::proto::ProtoIMMessage*>(
      &::im::citylife::proto::_ProtoIMMessage_default_instance_);
}
inline const ::im::citylife::proto::ProtoIMMessage& ProtoIMSendMessage::message() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMSendMessage.message)
  return _internal_message();
}
inline ::im::citylife::proto::ProtoIMMessage* ProtoIMSendMessage::release_message() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMSendMessage.message)
  
  ::im::citylife::proto::ProtoIMMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::im::citylife::proto::ProtoIMMessage* ProtoIMSendMessage::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::citylife::proto::ProtoIMMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  return message_;
}
inline ::im::citylife::proto::ProtoIMMessage* ProtoIMSendMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMSendMessage.message)
  return _internal_mutable_message();
}
inline void ProtoIMSendMessage::set_allocated_message(::im::citylife::proto::ProtoIMMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMSendMessage.message)
}

// .im.citylife.proto.ProtoIMAppSendMessageAsyncInfo async_info = 2;
inline bool ProtoIMSendMessage::_internal_has_async_info() const {
  return this != internal_default_instance() && async_info_ != nullptr;
}
inline bool ProtoIMSendMessage::has_async_info() const {
  return _internal_has_async_info();
}
inline void ProtoIMSendMessage::clear_async_info() {
  if (GetArenaNoVirtual() == nullptr && async_info_ != nullptr) {
    delete async_info_;
  }
  async_info_ = nullptr;
}
inline const ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo& ProtoIMSendMessage::_internal_async_info() const {
  const ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* p = async_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo*>(
      &::im::citylife::proto::_ProtoIMAppSendMessageAsyncInfo_default_instance_);
}
inline const ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo& ProtoIMSendMessage::async_info() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMSendMessage.async_info)
  return _internal_async_info();
}
inline ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* ProtoIMSendMessage::release_async_info() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMSendMessage.async_info)
  
  ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* temp = async_info_;
  async_info_ = nullptr;
  return temp;
}
inline ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* ProtoIMSendMessage::_internal_mutable_async_info() {
  
  if (async_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo>(GetArenaNoVirtual());
    async_info_ = p;
  }
  return async_info_;
}
inline ::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* ProtoIMSendMessage::mutable_async_info() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMSendMessage.async_info)
  return _internal_mutable_async_info();
}
inline void ProtoIMSendMessage::set_allocated_async_info(::im::citylife::proto::ProtoIMAppSendMessageAsyncInfo* async_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete async_info_;
  }
  if (async_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      async_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, async_info, submessage_arena);
    }
    
  } else {
    
  }
  async_info_ = async_info;
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMSendMessage.async_info)
}

// .im.citylife.proto.ProtoIMOfflinePushInfo msg_push_info = 3;
inline bool ProtoIMSendMessage::_internal_has_msg_push_info() const {
  return this != internal_default_instance() && msg_push_info_ != nullptr;
}
inline bool ProtoIMSendMessage::has_msg_push_info() const {
  return _internal_has_msg_push_info();
}
inline void ProtoIMSendMessage::clear_msg_push_info() {
  if (GetArenaNoVirtual() == nullptr && msg_push_info_ != nullptr) {
    delete msg_push_info_;
  }
  msg_push_info_ = nullptr;
}
inline const ::im::citylife::proto::ProtoIMOfflinePushInfo& ProtoIMSendMessage::_internal_msg_push_info() const {
  const ::im::citylife::proto::ProtoIMOfflinePushInfo* p = msg_push_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::im::citylife::proto::ProtoIMOfflinePushInfo*>(
      &::im::citylife::proto::_ProtoIMOfflinePushInfo_default_instance_);
}
inline const ::im::citylife::proto::ProtoIMOfflinePushInfo& ProtoIMSendMessage::msg_push_info() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMSendMessage.msg_push_info)
  return _internal_msg_push_info();
}
inline ::im::citylife::proto::ProtoIMOfflinePushInfo* ProtoIMSendMessage::release_msg_push_info() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMSendMessage.msg_push_info)
  
  ::im::citylife::proto::ProtoIMOfflinePushInfo* temp = msg_push_info_;
  msg_push_info_ = nullptr;
  return temp;
}
inline ::im::citylife::proto::ProtoIMOfflinePushInfo* ProtoIMSendMessage::_internal_mutable_msg_push_info() {
  
  if (msg_push_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::citylife::proto::ProtoIMOfflinePushInfo>(GetArenaNoVirtual());
    msg_push_info_ = p;
  }
  return msg_push_info_;
}
inline ::im::citylife::proto::ProtoIMOfflinePushInfo* ProtoIMSendMessage::mutable_msg_push_info() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMSendMessage.msg_push_info)
  return _internal_mutable_msg_push_info();
}
inline void ProtoIMSendMessage::set_allocated_msg_push_info(::im::citylife::proto::ProtoIMOfflinePushInfo* msg_push_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_push_info_;
  }
  if (msg_push_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_push_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_push_info, submessage_arena);
    }
    
  } else {
    
  }
  msg_push_info_ = msg_push_info;
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMSendMessage.msg_push_info)
}

// -------------------------------------------------------------------

// ProtoIMMessage

// string msg_uuid = 1;
inline void ProtoIMMessage::clear_msg_uuid() {
  msg_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMMessage::msg_uuid() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessage.msg_uuid)
  return _internal_msg_uuid();
}
inline void ProtoIMMessage::set_msg_uuid(const std::string& value) {
  _internal_set_msg_uuid(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessage.msg_uuid)
}
inline std::string* ProtoIMMessage::mutable_msg_uuid() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMMessage.msg_uuid)
  return _internal_mutable_msg_uuid();
}
inline const std::string& ProtoIMMessage::_internal_msg_uuid() const {
  return msg_uuid_.GetNoArena();
}
inline void ProtoIMMessage::_internal_set_msg_uuid(const std::string& value) {
  
  msg_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMMessage::set_msg_uuid(std::string&& value) {
  
  msg_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMMessage.msg_uuid)
}
inline void ProtoIMMessage::set_msg_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMMessage.msg_uuid)
}
inline void ProtoIMMessage::set_msg_uuid(const char* value, size_t size) {
  
  msg_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMMessage.msg_uuid)
}
inline std::string* ProtoIMMessage::_internal_mutable_msg_uuid() {
  
  return msg_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMMessage::release_msg_uuid() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMMessage.msg_uuid)
  
  return msg_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMMessage::set_allocated_msg_uuid(std::string* msg_uuid) {
  if (msg_uuid != nullptr) {
    
  } else {
    
  }
  msg_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_uuid);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMMessage.msg_uuid)
}

// string msg_type = 2;
inline void ProtoIMMessage::clear_msg_type() {
  msg_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMMessage::msg_type() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessage.msg_type)
  return _internal_msg_type();
}
inline void ProtoIMMessage::set_msg_type(const std::string& value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessage.msg_type)
}
inline std::string* ProtoIMMessage::mutable_msg_type() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMMessage.msg_type)
  return _internal_mutable_msg_type();
}
inline const std::string& ProtoIMMessage::_internal_msg_type() const {
  return msg_type_.GetNoArena();
}
inline void ProtoIMMessage::_internal_set_msg_type(const std::string& value) {
  
  msg_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMMessage::set_msg_type(std::string&& value) {
  
  msg_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMMessage.msg_type)
}
inline void ProtoIMMessage::set_msg_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMMessage.msg_type)
}
inline void ProtoIMMessage::set_msg_type(const char* value, size_t size) {
  
  msg_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMMessage.msg_type)
}
inline std::string* ProtoIMMessage::_internal_mutable_msg_type() {
  
  return msg_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMMessage::release_msg_type() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMMessage.msg_type)
  
  return msg_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMMessage::set_allocated_msg_type(std::string* msg_type) {
  if (msg_type != nullptr) {
    
  } else {
    
  }
  msg_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_type);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMMessage.msg_type)
}

// bool isSend = 3;
inline void ProtoIMMessage::clear_issend() {
  issend_ = false;
}
inline bool ProtoIMMessage::_internal_issend() const {
  return issend_;
}
inline bool ProtoIMMessage::issend() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessage.isSend)
  return _internal_issend();
}
inline void ProtoIMMessage::_internal_set_issend(bool value) {
  
  issend_ = value;
}
inline void ProtoIMMessage::set_issend(bool value) {
  _internal_set_issend(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessage.isSend)
}

// string sender = 4;
inline void ProtoIMMessage::clear_sender() {
  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMMessage::sender() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessage.sender)
  return _internal_sender();
}
inline void ProtoIMMessage::set_sender(const std::string& value) {
  _internal_set_sender(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessage.sender)
}
inline std::string* ProtoIMMessage::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMMessage.sender)
  return _internal_mutable_sender();
}
inline const std::string& ProtoIMMessage::_internal_sender() const {
  return sender_.GetNoArena();
}
inline void ProtoIMMessage::_internal_set_sender(const std::string& value) {
  
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMMessage::set_sender(std::string&& value) {
  
  sender_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMMessage.sender)
}
inline void ProtoIMMessage::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMMessage.sender)
}
inline void ProtoIMMessage::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMMessage.sender)
}
inline std::string* ProtoIMMessage::_internal_mutable_sender() {
  
  return sender_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMMessage::release_sender() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMMessage.sender)
  
  return sender_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMMessage::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMMessage.sender)
}

// string receiver = 5;
inline void ProtoIMMessage::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMMessage::receiver() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessage.receiver)
  return _internal_receiver();
}
inline void ProtoIMMessage::set_receiver(const std::string& value) {
  _internal_set_receiver(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessage.receiver)
}
inline std::string* ProtoIMMessage::mutable_receiver() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMMessage.receiver)
  return _internal_mutable_receiver();
}
inline const std::string& ProtoIMMessage::_internal_receiver() const {
  return receiver_.GetNoArena();
}
inline void ProtoIMMessage::_internal_set_receiver(const std::string& value) {
  
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMMessage::set_receiver(std::string&& value) {
  
  receiver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMMessage.receiver)
}
inline void ProtoIMMessage::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMMessage.receiver)
}
inline void ProtoIMMessage::set_receiver(const char* value, size_t size) {
  
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMMessage.receiver)
}
inline std::string* ProtoIMMessage::_internal_mutable_receiver() {
  
  return receiver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMMessage::release_receiver() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMMessage.receiver)
  
  return receiver_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMMessage::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    
  } else {
    
  }
  receiver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMMessage.receiver)
}

// string msg_content = 6;
inline void ProtoIMMessage::clear_msg_content() {
  msg_content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMMessage::msg_content() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessage.msg_content)
  return _internal_msg_content();
}
inline void ProtoIMMessage::set_msg_content(const std::string& value) {
  _internal_set_msg_content(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessage.msg_content)
}
inline std::string* ProtoIMMessage::mutable_msg_content() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMMessage.msg_content)
  return _internal_mutable_msg_content();
}
inline const std::string& ProtoIMMessage::_internal_msg_content() const {
  return msg_content_.GetNoArena();
}
inline void ProtoIMMessage::_internal_set_msg_content(const std::string& value) {
  
  msg_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMMessage::set_msg_content(std::string&& value) {
  
  msg_content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMMessage.msg_content)
}
inline void ProtoIMMessage::set_msg_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMMessage.msg_content)
}
inline void ProtoIMMessage::set_msg_content(const char* value, size_t size) {
  
  msg_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMMessage.msg_content)
}
inline std::string* ProtoIMMessage::_internal_mutable_msg_content() {
  
  return msg_content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMMessage::release_msg_content() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMMessage.msg_content)
  
  return msg_content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMMessage::set_allocated_msg_content(std::string* msg_content) {
  if (msg_content != nullptr) {
    
  } else {
    
  }
  msg_content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_content);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMMessage.msg_content)
}

// int64 timestamp = 7;
inline void ProtoIMMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtoIMMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtoIMMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessage.timestamp)
  return _internal_timestamp();
}
inline void ProtoIMMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ProtoIMMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessage.timestamp)
}

// .im.citylife.proto.ProtoIMMessageStatus msg_status = 8;
inline void ProtoIMMessage::clear_msg_status() {
  msg_status_ = 0;
}
inline ::im::citylife::proto::ProtoIMMessageStatus ProtoIMMessage::_internal_msg_status() const {
  return static_cast< ::im::citylife::proto::ProtoIMMessageStatus >(msg_status_);
}
inline ::im::citylife::proto::ProtoIMMessageStatus ProtoIMMessage::msg_status() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessage.msg_status)
  return _internal_msg_status();
}
inline void ProtoIMMessage::_internal_set_msg_status(::im::citylife::proto::ProtoIMMessageStatus value) {
  
  msg_status_ = value;
}
inline void ProtoIMMessage::set_msg_status(::im::citylife::proto::ProtoIMMessageStatus value) {
  _internal_set_msg_status(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessage.msg_status)
}

// -------------------------------------------------------------------

// ProtoIMConversation

// string conv_id = 1;
inline void ProtoIMConversation::clear_conv_id() {
  conv_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMConversation::conv_id() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConversation.conv_id)
  return _internal_conv_id();
}
inline void ProtoIMConversation::set_conv_id(const std::string& value) {
  _internal_set_conv_id(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMConversation.conv_id)
}
inline std::string* ProtoIMConversation::mutable_conv_id() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMConversation.conv_id)
  return _internal_mutable_conv_id();
}
inline const std::string& ProtoIMConversation::_internal_conv_id() const {
  return conv_id_.GetNoArena();
}
inline void ProtoIMConversation::_internal_set_conv_id(const std::string& value) {
  
  conv_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMConversation::set_conv_id(std::string&& value) {
  
  conv_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMConversation.conv_id)
}
inline void ProtoIMConversation::set_conv_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  conv_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMConversation.conv_id)
}
inline void ProtoIMConversation::set_conv_id(const char* value, size_t size) {
  
  conv_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMConversation.conv_id)
}
inline std::string* ProtoIMConversation::_internal_mutable_conv_id() {
  
  return conv_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMConversation::release_conv_id() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMConversation.conv_id)
  
  return conv_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMConversation::set_allocated_conv_id(std::string* conv_id) {
  if (conv_id != nullptr) {
    
  } else {
    
  }
  conv_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), conv_id);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMConversation.conv_id)
}

// int32 conv_type = 2;
inline void ProtoIMConversation::clear_conv_type() {
  conv_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMConversation::_internal_conv_type() const {
  return conv_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMConversation::conv_type() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConversation.conv_type)
  return _internal_conv_type();
}
inline void ProtoIMConversation::_internal_set_conv_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  conv_type_ = value;
}
inline void ProtoIMConversation::set_conv_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_conv_type(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMConversation.conv_type)
}

// int64 timestamp = 3;
inline void ProtoIMConversation::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtoIMConversation::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtoIMConversation::timestamp() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConversation.timestamp)
  return _internal_timestamp();
}
inline void ProtoIMConversation::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ProtoIMConversation::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMConversation.timestamp)
}

// string snapshot = 4;
inline void ProtoIMConversation::clear_snapshot() {
  snapshot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMConversation::snapshot() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConversation.snapshot)
  return _internal_snapshot();
}
inline void ProtoIMConversation::set_snapshot(const std::string& value) {
  _internal_set_snapshot(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMConversation.snapshot)
}
inline std::string* ProtoIMConversation::mutable_snapshot() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMConversation.snapshot)
  return _internal_mutable_snapshot();
}
inline const std::string& ProtoIMConversation::_internal_snapshot() const {
  return snapshot_.GetNoArena();
}
inline void ProtoIMConversation::_internal_set_snapshot(const std::string& value) {
  
  snapshot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMConversation::set_snapshot(std::string&& value) {
  
  snapshot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMConversation.snapshot)
}
inline void ProtoIMConversation::set_snapshot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snapshot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMConversation.snapshot)
}
inline void ProtoIMConversation::set_snapshot(const char* value, size_t size) {
  
  snapshot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMConversation.snapshot)
}
inline std::string* ProtoIMConversation::_internal_mutable_snapshot() {
  
  return snapshot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMConversation::release_snapshot() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMConversation.snapshot)
  
  return snapshot_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMConversation::set_allocated_snapshot(std::string* snapshot) {
  if (snapshot != nullptr) {
    
  } else {
    
  }
  snapshot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshot);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMConversation.snapshot)
}

// string last_msg_uuid = 5;
inline void ProtoIMConversation::clear_last_msg_uuid() {
  last_msg_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMConversation::last_msg_uuid() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConversation.last_msg_uuid)
  return _internal_last_msg_uuid();
}
inline void ProtoIMConversation::set_last_msg_uuid(const std::string& value) {
  _internal_set_last_msg_uuid(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMConversation.last_msg_uuid)
}
inline std::string* ProtoIMConversation::mutable_last_msg_uuid() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMConversation.last_msg_uuid)
  return _internal_mutable_last_msg_uuid();
}
inline const std::string& ProtoIMConversation::_internal_last_msg_uuid() const {
  return last_msg_uuid_.GetNoArena();
}
inline void ProtoIMConversation::_internal_set_last_msg_uuid(const std::string& value) {
  
  last_msg_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMConversation::set_last_msg_uuid(std::string&& value) {
  
  last_msg_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMConversation.last_msg_uuid)
}
inline void ProtoIMConversation::set_last_msg_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_msg_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMConversation.last_msg_uuid)
}
inline void ProtoIMConversation::set_last_msg_uuid(const char* value, size_t size) {
  
  last_msg_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMConversation.last_msg_uuid)
}
inline std::string* ProtoIMConversation::_internal_mutable_last_msg_uuid() {
  
  return last_msg_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMConversation::release_last_msg_uuid() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMConversation.last_msg_uuid)
  
  return last_msg_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMConversation::set_allocated_last_msg_uuid(std::string* last_msg_uuid) {
  if (last_msg_uuid != nullptr) {
    
  } else {
    
  }
  last_msg_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_msg_uuid);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMConversation.last_msg_uuid)
}

// string last_readed_msg_uuid = 6;
inline void ProtoIMConversation::clear_last_readed_msg_uuid() {
  last_readed_msg_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMConversation::last_readed_msg_uuid() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConversation.last_readed_msg_uuid)
  return _internal_last_readed_msg_uuid();
}
inline void ProtoIMConversation::set_last_readed_msg_uuid(const std::string& value) {
  _internal_set_last_readed_msg_uuid(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMConversation.last_readed_msg_uuid)
}
inline std::string* ProtoIMConversation::mutable_last_readed_msg_uuid() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMConversation.last_readed_msg_uuid)
  return _internal_mutable_last_readed_msg_uuid();
}
inline const std::string& ProtoIMConversation::_internal_last_readed_msg_uuid() const {
  return last_readed_msg_uuid_.GetNoArena();
}
inline void ProtoIMConversation::_internal_set_last_readed_msg_uuid(const std::string& value) {
  
  last_readed_msg_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMConversation::set_last_readed_msg_uuid(std::string&& value) {
  
  last_readed_msg_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMConversation.last_readed_msg_uuid)
}
inline void ProtoIMConversation::set_last_readed_msg_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_readed_msg_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMConversation.last_readed_msg_uuid)
}
inline void ProtoIMConversation::set_last_readed_msg_uuid(const char* value, size_t size) {
  
  last_readed_msg_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMConversation.last_readed_msg_uuid)
}
inline std::string* ProtoIMConversation::_internal_mutable_last_readed_msg_uuid() {
  
  return last_readed_msg_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMConversation::release_last_readed_msg_uuid() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMConversation.last_readed_msg_uuid)
  
  return last_readed_msg_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMConversation::set_allocated_last_readed_msg_uuid(std::string* last_readed_msg_uuid) {
  if (last_readed_msg_uuid != nullptr) {
    
  } else {
    
  }
  last_readed_msg_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_readed_msg_uuid);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMConversation.last_readed_msg_uuid)
}

// int64 last_readed_msg_timestamp = 7;
inline void ProtoIMConversation::clear_last_readed_msg_timestamp() {
  last_readed_msg_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtoIMConversation::_internal_last_readed_msg_timestamp() const {
  return last_readed_msg_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtoIMConversation::last_readed_msg_timestamp() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConversation.last_readed_msg_timestamp)
  return _internal_last_readed_msg_timestamp();
}
inline void ProtoIMConversation::_internal_set_last_readed_msg_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_readed_msg_timestamp_ = value;
}
inline void ProtoIMConversation::set_last_readed_msg_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_readed_msg_timestamp(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMConversation.last_readed_msg_timestamp)
}

// int32 unread_count = 8;
inline void ProtoIMConversation::clear_unread_count() {
  unread_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMConversation::_internal_unread_count() const {
  return unread_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMConversation::unread_count() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConversation.unread_count)
  return _internal_unread_count();
}
inline void ProtoIMConversation::_internal_set_unread_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unread_count_ = value;
}
inline void ProtoIMConversation::set_unread_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unread_count(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMConversation.unread_count)
}

// .im.citylife.proto.ProtoIMSendMessage last_msg = 9;
inline bool ProtoIMConversation::_internal_has_last_msg() const {
  return this != internal_default_instance() && last_msg_ != nullptr;
}
inline bool ProtoIMConversation::has_last_msg() const {
  return _internal_has_last_msg();
}
inline void ProtoIMConversation::clear_last_msg() {
  if (GetArenaNoVirtual() == nullptr && last_msg_ != nullptr) {
    delete last_msg_;
  }
  last_msg_ = nullptr;
}
inline const ::im::citylife::proto::ProtoIMSendMessage& ProtoIMConversation::_internal_last_msg() const {
  const ::im::citylife::proto::ProtoIMSendMessage* p = last_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::im::citylife::proto::ProtoIMSendMessage*>(
      &::im::citylife::proto::_ProtoIMSendMessage_default_instance_);
}
inline const ::im::citylife::proto::ProtoIMSendMessage& ProtoIMConversation::last_msg() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConversation.last_msg)
  return _internal_last_msg();
}
inline ::im::citylife::proto::ProtoIMSendMessage* ProtoIMConversation::release_last_msg() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMConversation.last_msg)
  
  ::im::citylife::proto::ProtoIMSendMessage* temp = last_msg_;
  last_msg_ = nullptr;
  return temp;
}
inline ::im::citylife::proto::ProtoIMSendMessage* ProtoIMConversation::_internal_mutable_last_msg() {
  
  if (last_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::citylife::proto::ProtoIMSendMessage>(GetArenaNoVirtual());
    last_msg_ = p;
  }
  return last_msg_;
}
inline ::im::citylife::proto::ProtoIMSendMessage* ProtoIMConversation::mutable_last_msg() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMConversation.last_msg)
  return _internal_mutable_last_msg();
}
inline void ProtoIMConversation::set_allocated_last_msg(::im::citylife::proto::ProtoIMSendMessage* last_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete last_msg_;
  }
  if (last_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_msg, submessage_arena);
    }
    
  } else {
    
  }
  last_msg_ = last_msg;
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMConversation.last_msg)
}

// -------------------------------------------------------------------

// ProtoIMConversations

// repeated .im.citylife.proto.ProtoIMConversation convs = 1;
inline int ProtoIMConversations::_internal_convs_size() const {
  return convs_.size();
}
inline int ProtoIMConversations::convs_size() const {
  return _internal_convs_size();
}
inline void ProtoIMConversations::clear_convs() {
  convs_.Clear();
}
inline ::im::citylife::proto::ProtoIMConversation* ProtoIMConversations::mutable_convs(int index) {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMConversations.convs)
  return convs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::citylife::proto::ProtoIMConversation >*
ProtoIMConversations::mutable_convs() {
  // @@protoc_insertion_point(field_mutable_list:im.citylife.proto.ProtoIMConversations.convs)
  return &convs_;
}
inline const ::im::citylife::proto::ProtoIMConversation& ProtoIMConversations::_internal_convs(int index) const {
  return convs_.Get(index);
}
inline const ::im::citylife::proto::ProtoIMConversation& ProtoIMConversations::convs(int index) const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConversations.convs)
  return _internal_convs(index);
}
inline ::im::citylife::proto::ProtoIMConversation* ProtoIMConversations::_internal_add_convs() {
  return convs_.Add();
}
inline ::im::citylife::proto::ProtoIMConversation* ProtoIMConversations::add_convs() {
  // @@protoc_insertion_point(field_add:im.citylife.proto.ProtoIMConversations.convs)
  return _internal_add_convs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::citylife::proto::ProtoIMConversation >&
ProtoIMConversations::convs() const {
  // @@protoc_insertion_point(field_list:im.citylife.proto.ProtoIMConversations.convs)
  return convs_;
}

// -------------------------------------------------------------------

// ProtoIMMessageEx

// string msg_uuid = 1;
inline void ProtoIMMessageEx::clear_msg_uuid() {
  msg_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMMessageEx::msg_uuid() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessageEx.msg_uuid)
  return _internal_msg_uuid();
}
inline void ProtoIMMessageEx::set_msg_uuid(const std::string& value) {
  _internal_set_msg_uuid(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessageEx.msg_uuid)
}
inline std::string* ProtoIMMessageEx::mutable_msg_uuid() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMMessageEx.msg_uuid)
  return _internal_mutable_msg_uuid();
}
inline const std::string& ProtoIMMessageEx::_internal_msg_uuid() const {
  return msg_uuid_.GetNoArena();
}
inline void ProtoIMMessageEx::_internal_set_msg_uuid(const std::string& value) {
  
  msg_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMMessageEx::set_msg_uuid(std::string&& value) {
  
  msg_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMMessageEx.msg_uuid)
}
inline void ProtoIMMessageEx::set_msg_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMMessageEx.msg_uuid)
}
inline void ProtoIMMessageEx::set_msg_uuid(const char* value, size_t size) {
  
  msg_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMMessageEx.msg_uuid)
}
inline std::string* ProtoIMMessageEx::_internal_mutable_msg_uuid() {
  
  return msg_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMMessageEx::release_msg_uuid() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMMessageEx.msg_uuid)
  
  return msg_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMMessageEx::set_allocated_msg_uuid(std::string* msg_uuid) {
  if (msg_uuid != nullptr) {
    
  } else {
    
  }
  msg_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_uuid);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMMessageEx.msg_uuid)
}

// .im.citylife.proto.ProtoIMConversationBase conv = 2;
inline bool ProtoIMMessageEx::_internal_has_conv() const {
  return this != internal_default_instance() && conv_ != nullptr;
}
inline bool ProtoIMMessageEx::has_conv() const {
  return _internal_has_conv();
}
inline void ProtoIMMessageEx::clear_conv() {
  if (GetArenaNoVirtual() == nullptr && conv_ != nullptr) {
    delete conv_;
  }
  conv_ = nullptr;
}
inline const ::im::citylife::proto::ProtoIMConversationBase& ProtoIMMessageEx::_internal_conv() const {
  const ::im::citylife::proto::ProtoIMConversationBase* p = conv_;
  return p != nullptr ? *p : *reinterpret_cast<const ::im::citylife::proto::ProtoIMConversationBase*>(
      &::im::citylife::proto::_ProtoIMConversationBase_default_instance_);
}
inline const ::im::citylife::proto::ProtoIMConversationBase& ProtoIMMessageEx::conv() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessageEx.conv)
  return _internal_conv();
}
inline ::im::citylife::proto::ProtoIMConversationBase* ProtoIMMessageEx::release_conv() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMMessageEx.conv)
  
  ::im::citylife::proto::ProtoIMConversationBase* temp = conv_;
  conv_ = nullptr;
  return temp;
}
inline ::im::citylife::proto::ProtoIMConversationBase* ProtoIMMessageEx::_internal_mutable_conv() {
  
  if (conv_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::citylife::proto::ProtoIMConversationBase>(GetArenaNoVirtual());
    conv_ = p;
  }
  return conv_;
}
inline ::im::citylife::proto::ProtoIMConversationBase* ProtoIMMessageEx::mutable_conv() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMMessageEx.conv)
  return _internal_mutable_conv();
}
inline void ProtoIMMessageEx::set_allocated_conv(::im::citylife::proto::ProtoIMConversationBase* conv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete conv_;
  }
  if (conv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conv, submessage_arena);
    }
    
  } else {
    
  }
  conv_ = conv;
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMMessageEx.conv)
}

// string sender = 4;
inline void ProtoIMMessageEx::clear_sender() {
  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMMessageEx::sender() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessageEx.sender)
  return _internal_sender();
}
inline void ProtoIMMessageEx::set_sender(const std::string& value) {
  _internal_set_sender(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessageEx.sender)
}
inline std::string* ProtoIMMessageEx::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMMessageEx.sender)
  return _internal_mutable_sender();
}
inline const std::string& ProtoIMMessageEx::_internal_sender() const {
  return sender_.GetNoArena();
}
inline void ProtoIMMessageEx::_internal_set_sender(const std::string& value) {
  
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMMessageEx::set_sender(std::string&& value) {
  
  sender_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMMessageEx.sender)
}
inline void ProtoIMMessageEx::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMMessageEx.sender)
}
inline void ProtoIMMessageEx::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMMessageEx.sender)
}
inline std::string* ProtoIMMessageEx::_internal_mutable_sender() {
  
  return sender_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMMessageEx::release_sender() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMMessageEx.sender)
  
  return sender_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMMessageEx::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMMessageEx.sender)
}

// string receiver = 5;
inline void ProtoIMMessageEx::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMMessageEx::receiver() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessageEx.receiver)
  return _internal_receiver();
}
inline void ProtoIMMessageEx::set_receiver(const std::string& value) {
  _internal_set_receiver(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessageEx.receiver)
}
inline std::string* ProtoIMMessageEx::mutable_receiver() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMMessageEx.receiver)
  return _internal_mutable_receiver();
}
inline const std::string& ProtoIMMessageEx::_internal_receiver() const {
  return receiver_.GetNoArena();
}
inline void ProtoIMMessageEx::_internal_set_receiver(const std::string& value) {
  
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMMessageEx::set_receiver(std::string&& value) {
  
  receiver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMMessageEx.receiver)
}
inline void ProtoIMMessageEx::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMMessageEx.receiver)
}
inline void ProtoIMMessageEx::set_receiver(const char* value, size_t size) {
  
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMMessageEx.receiver)
}
inline std::string* ProtoIMMessageEx::_internal_mutable_receiver() {
  
  return receiver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMMessageEx::release_receiver() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMMessageEx.receiver)
  
  return receiver_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMMessageEx::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    
  } else {
    
  }
  receiver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMMessageEx.receiver)
}

// int64 timestamp = 6;
inline void ProtoIMMessageEx::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtoIMMessageEx::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtoIMMessageEx::timestamp() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessageEx.timestamp)
  return _internal_timestamp();
}
inline void ProtoIMMessageEx::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ProtoIMMessageEx::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessageEx.timestamp)
}

// .im.citylife.proto.ProtoIMMessageStatus msg_status = 7;
inline void ProtoIMMessageEx::clear_msg_status() {
  msg_status_ = 0;
}
inline ::im::citylife::proto::ProtoIMMessageStatus ProtoIMMessageEx::_internal_msg_status() const {
  return static_cast< ::im::citylife::proto::ProtoIMMessageStatus >(msg_status_);
}
inline ::im::citylife::proto::ProtoIMMessageStatus ProtoIMMessageEx::msg_status() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessageEx.msg_status)
  return _internal_msg_status();
}
inline void ProtoIMMessageEx::_internal_set_msg_status(::im::citylife::proto::ProtoIMMessageStatus value) {
  
  msg_status_ = value;
}
inline void ProtoIMMessageEx::set_msg_status(::im::citylife::proto::ProtoIMMessageStatus value) {
  _internal_set_msg_status(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessageEx.msg_status)
}

// string extra = 8;
inline void ProtoIMMessageEx::clear_extra() {
  extra_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMMessageEx::extra() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessageEx.extra)
  return _internal_extra();
}
inline void ProtoIMMessageEx::set_extra(const std::string& value) {
  _internal_set_extra(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessageEx.extra)
}
inline std::string* ProtoIMMessageEx::mutable_extra() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMMessageEx.extra)
  return _internal_mutable_extra();
}
inline const std::string& ProtoIMMessageEx::_internal_extra() const {
  return extra_.GetNoArena();
}
inline void ProtoIMMessageEx::_internal_set_extra(const std::string& value) {
  
  extra_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMMessageEx::set_extra(std::string&& value) {
  
  extra_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMMessageEx.extra)
}
inline void ProtoIMMessageEx::set_extra(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extra_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMMessageEx.extra)
}
inline void ProtoIMMessageEx::set_extra(const char* value, size_t size) {
  
  extra_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMMessageEx.extra)
}
inline std::string* ProtoIMMessageEx::_internal_mutable_extra() {
  
  return extra_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMMessageEx::release_extra() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMMessageEx.extra)
  
  return extra_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMMessageEx::set_allocated_extra(std::string* extra) {
  if (extra != nullptr) {
    
  } else {
    
  }
  extra_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMMessageEx.extra)
}

// .im.citylife.proto.ProtoIMMessageText text = 16;
inline bool ProtoIMMessageEx::_internal_has_text() const {
  return test_oneof_case() == kText;
}
inline bool ProtoIMMessageEx::has_text() const {
  return _internal_has_text();
}
inline void ProtoIMMessageEx::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void ProtoIMMessageEx::clear_text() {
  if (_internal_has_text()) {
    delete test_oneof_.text_;
    clear_has_test_oneof();
  }
}
inline ::im::citylife::proto::ProtoIMMessageText* ProtoIMMessageEx::release_text() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMMessageEx.text)
  if (_internal_has_text()) {
    clear_has_test_oneof();
      ::im::citylife::proto::ProtoIMMessageText* temp = test_oneof_.text_;
    test_oneof_.text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::citylife::proto::ProtoIMMessageText& ProtoIMMessageEx::_internal_text() const {
  return _internal_has_text()
      ? *test_oneof_.text_
      : *reinterpret_cast< ::im::citylife::proto::ProtoIMMessageText*>(&::im::citylife::proto::_ProtoIMMessageText_default_instance_);
}
inline const ::im::citylife::proto::ProtoIMMessageText& ProtoIMMessageEx::text() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessageEx.text)
  return _internal_text();
}
inline ::im::citylife::proto::ProtoIMMessageText* ProtoIMMessageEx::_internal_mutable_text() {
  if (!_internal_has_text()) {
    clear_test_oneof();
    set_has_text();
    test_oneof_.text_ = CreateMaybeMessage< ::im::citylife::proto::ProtoIMMessageText >(
        GetArenaNoVirtual());
  }
  return test_oneof_.text_;
}
inline ::im::citylife::proto::ProtoIMMessageText* ProtoIMMessageEx::mutable_text() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMMessageEx.text)
  return _internal_mutable_text();
}

// .im.citylife.proto.ProtoIMMessageImage image = 17;
inline bool ProtoIMMessageEx::_internal_has_image() const {
  return test_oneof_case() == kImage;
}
inline bool ProtoIMMessageEx::has_image() const {
  return _internal_has_image();
}
inline void ProtoIMMessageEx::set_has_image() {
  _oneof_case_[0] = kImage;
}
inline void ProtoIMMessageEx::clear_image() {
  if (_internal_has_image()) {
    delete test_oneof_.image_;
    clear_has_test_oneof();
  }
}
inline ::im::citylife::proto::ProtoIMMessageImage* ProtoIMMessageEx::release_image() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMMessageEx.image)
  if (_internal_has_image()) {
    clear_has_test_oneof();
      ::im::citylife::proto::ProtoIMMessageImage* temp = test_oneof_.image_;
    test_oneof_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::citylife::proto::ProtoIMMessageImage& ProtoIMMessageEx::_internal_image() const {
  return _internal_has_image()
      ? *test_oneof_.image_
      : *reinterpret_cast< ::im::citylife::proto::ProtoIMMessageImage*>(&::im::citylife::proto::_ProtoIMMessageImage_default_instance_);
}
inline const ::im::citylife::proto::ProtoIMMessageImage& ProtoIMMessageEx::image() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessageEx.image)
  return _internal_image();
}
inline ::im::citylife::proto::ProtoIMMessageImage* ProtoIMMessageEx::_internal_mutable_image() {
  if (!_internal_has_image()) {
    clear_test_oneof();
    set_has_image();
    test_oneof_.image_ = CreateMaybeMessage< ::im::citylife::proto::ProtoIMMessageImage >(
        GetArenaNoVirtual());
  }
  return test_oneof_.image_;
}
inline ::im::citylife::proto::ProtoIMMessageImage* ProtoIMMessageEx::mutable_image() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMMessageEx.image)
  return _internal_mutable_image();
}

inline bool ProtoIMMessageEx::has_test_oneof() const {
  return test_oneof_case() != TEST_ONEOF_NOT_SET;
}
inline void ProtoIMMessageEx::clear_has_test_oneof() {
  _oneof_case_[0] = TEST_ONEOF_NOT_SET;
}
inline ProtoIMMessageEx::TestOneofCase ProtoIMMessageEx::test_oneof_case() const {
  return ProtoIMMessageEx::TestOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProtoIMConversationBase

// string conv_id = 1;
inline void ProtoIMConversationBase::clear_conv_id() {
  conv_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMConversationBase::conv_id() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConversationBase.conv_id)
  return _internal_conv_id();
}
inline void ProtoIMConversationBase::set_conv_id(const std::string& value) {
  _internal_set_conv_id(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMConversationBase.conv_id)
}
inline std::string* ProtoIMConversationBase::mutable_conv_id() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMConversationBase.conv_id)
  return _internal_mutable_conv_id();
}
inline const std::string& ProtoIMConversationBase::_internal_conv_id() const {
  return conv_id_.GetNoArena();
}
inline void ProtoIMConversationBase::_internal_set_conv_id(const std::string& value) {
  
  conv_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMConversationBase::set_conv_id(std::string&& value) {
  
  conv_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMConversationBase.conv_id)
}
inline void ProtoIMConversationBase::set_conv_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  conv_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMConversationBase.conv_id)
}
inline void ProtoIMConversationBase::set_conv_id(const char* value, size_t size) {
  
  conv_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMConversationBase.conv_id)
}
inline std::string* ProtoIMConversationBase::_internal_mutable_conv_id() {
  
  return conv_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMConversationBase::release_conv_id() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMConversationBase.conv_id)
  
  return conv_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMConversationBase::set_allocated_conv_id(std::string* conv_id) {
  if (conv_id != nullptr) {
    
  } else {
    
  }
  conv_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), conv_id);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMConversationBase.conv_id)
}

// int32 conv_type = 2;
inline void ProtoIMConversationBase::clear_conv_type() {
  conv_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMConversationBase::_internal_conv_type() const {
  return conv_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMConversationBase::conv_type() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMConversationBase.conv_type)
  return _internal_conv_type();
}
inline void ProtoIMConversationBase::_internal_set_conv_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  conv_type_ = value;
}
inline void ProtoIMConversationBase::set_conv_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_conv_type(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMConversationBase.conv_type)
}

// -------------------------------------------------------------------

// ProtoIMMessageText

// string content = 1;
inline void ProtoIMMessageText::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMMessageText::content() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessageText.content)
  return _internal_content();
}
inline void ProtoIMMessageText::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessageText.content)
}
inline std::string* ProtoIMMessageText::mutable_content() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMMessageText.content)
  return _internal_mutable_content();
}
inline const std::string& ProtoIMMessageText::_internal_content() const {
  return content_.GetNoArena();
}
inline void ProtoIMMessageText::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMMessageText::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMMessageText.content)
}
inline void ProtoIMMessageText::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMMessageText.content)
}
inline void ProtoIMMessageText::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMMessageText.content)
}
inline std::string* ProtoIMMessageText::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMMessageText::release_content() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMMessageText.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMMessageText::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMMessageText.content)
}

// -------------------------------------------------------------------

// ProtoIMImage

// string image_uuid = 1;
inline void ProtoIMImage::clear_image_uuid() {
  image_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMImage::image_uuid() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMImage.image_uuid)
  return _internal_image_uuid();
}
inline void ProtoIMImage::set_image_uuid(const std::string& value) {
  _internal_set_image_uuid(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMImage.image_uuid)
}
inline std::string* ProtoIMImage::mutable_image_uuid() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMImage.image_uuid)
  return _internal_mutable_image_uuid();
}
inline const std::string& ProtoIMImage::_internal_image_uuid() const {
  return image_uuid_.GetNoArena();
}
inline void ProtoIMImage::_internal_set_image_uuid(const std::string& value) {
  
  image_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMImage::set_image_uuid(std::string&& value) {
  
  image_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMImage.image_uuid)
}
inline void ProtoIMImage::set_image_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMImage.image_uuid)
}
inline void ProtoIMImage::set_image_uuid(const char* value, size_t size) {
  
  image_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMImage.image_uuid)
}
inline std::string* ProtoIMImage::_internal_mutable_image_uuid() {
  
  return image_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMImage::release_image_uuid() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMImage.image_uuid)
  
  return image_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMImage::set_allocated_image_uuid(std::string* image_uuid) {
  if (image_uuid != nullptr) {
    
  } else {
    
  }
  image_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_uuid);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMImage.image_uuid)
}

// int32 image_type = 2;
inline void ProtoIMImage::clear_image_type() {
  image_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMImage::_internal_image_type() const {
  return image_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMImage::image_type() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMImage.image_type)
  return _internal_image_type();
}
inline void ProtoIMImage::_internal_set_image_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  image_type_ = value;
}
inline void ProtoIMImage::set_image_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_image_type(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMImage.image_type)
}

// int32 image_size = 3;
inline void ProtoIMImage::clear_image_size() {
  image_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMImage::_internal_image_size() const {
  return image_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMImage::image_size() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMImage.image_size)
  return _internal_image_size();
}
inline void ProtoIMImage::_internal_set_image_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  image_size_ = value;
}
inline void ProtoIMImage::set_image_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_image_size(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMImage.image_size)
}

// int32 image_heigh = 4;
inline void ProtoIMImage::clear_image_heigh() {
  image_heigh_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMImage::_internal_image_heigh() const {
  return image_heigh_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMImage::image_heigh() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMImage.image_heigh)
  return _internal_image_heigh();
}
inline void ProtoIMImage::_internal_set_image_heigh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  image_heigh_ = value;
}
inline void ProtoIMImage::set_image_heigh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_image_heigh(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMImage.image_heigh)
}

// int32 image_width = 5;
inline void ProtoIMImage::clear_image_width() {
  image_width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMImage::_internal_image_width() const {
  return image_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMImage::image_width() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMImage.image_width)
  return _internal_image_width();
}
inline void ProtoIMImage::_internal_set_image_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  image_width_ = value;
}
inline void ProtoIMImage::set_image_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_image_width(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMImage.image_width)
}

// string image_url = 6;
inline void ProtoIMImage::clear_image_url() {
  image_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMImage::image_url() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMImage.image_url)
  return _internal_image_url();
}
inline void ProtoIMImage::set_image_url(const std::string& value) {
  _internal_set_image_url(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMImage.image_url)
}
inline std::string* ProtoIMImage::mutable_image_url() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMImage.image_url)
  return _internal_mutable_image_url();
}
inline const std::string& ProtoIMImage::_internal_image_url() const {
  return image_url_.GetNoArena();
}
inline void ProtoIMImage::_internal_set_image_url(const std::string& value) {
  
  image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMImage::set_image_url(std::string&& value) {
  
  image_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMImage.image_url)
}
inline void ProtoIMImage::set_image_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMImage.image_url)
}
inline void ProtoIMImage::set_image_url(const char* value, size_t size) {
  
  image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMImage.image_url)
}
inline std::string* ProtoIMImage::_internal_mutable_image_url() {
  
  return image_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMImage::release_image_url() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMImage.image_url)
  
  return image_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMImage::set_allocated_image_url(std::string* image_url) {
  if (image_url != nullptr) {
    
  } else {
    
  }
  image_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_url);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMImage.image_url)
}

// -------------------------------------------------------------------

// ProtoIMMessageImage

// string image_uuid = 1;
inline void ProtoIMMessageImage::clear_image_uuid() {
  image_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMMessageImage::image_uuid() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessageImage.image_uuid)
  return _internal_image_uuid();
}
inline void ProtoIMMessageImage::set_image_uuid(const std::string& value) {
  _internal_set_image_uuid(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessageImage.image_uuid)
}
inline std::string* ProtoIMMessageImage::mutable_image_uuid() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMMessageImage.image_uuid)
  return _internal_mutable_image_uuid();
}
inline const std::string& ProtoIMMessageImage::_internal_image_uuid() const {
  return image_uuid_.GetNoArena();
}
inline void ProtoIMMessageImage::_internal_set_image_uuid(const std::string& value) {
  
  image_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMMessageImage::set_image_uuid(std::string&& value) {
  
  image_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMMessageImage.image_uuid)
}
inline void ProtoIMMessageImage::set_image_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMMessageImage.image_uuid)
}
inline void ProtoIMMessageImage::set_image_uuid(const char* value, size_t size) {
  
  image_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMMessageImage.image_uuid)
}
inline std::string* ProtoIMMessageImage::_internal_mutable_image_uuid() {
  
  return image_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMMessageImage::release_image_uuid() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMMessageImage.image_uuid)
  
  return image_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMMessageImage::set_allocated_image_uuid(std::string* image_uuid) {
  if (image_uuid != nullptr) {
    
  } else {
    
  }
  image_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_uuid);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMMessageImage.image_uuid)
}

// string local_path = 2;
inline void ProtoIMMessageImage::clear_local_path() {
  local_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoIMMessageImage::local_path() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessageImage.local_path)
  return _internal_local_path();
}
inline void ProtoIMMessageImage::set_local_path(const std::string& value) {
  _internal_set_local_path(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessageImage.local_path)
}
inline std::string* ProtoIMMessageImage::mutable_local_path() {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMMessageImage.local_path)
  return _internal_mutable_local_path();
}
inline const std::string& ProtoIMMessageImage::_internal_local_path() const {
  return local_path_.GetNoArena();
}
inline void ProtoIMMessageImage::_internal_set_local_path(const std::string& value) {
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoIMMessageImage::set_local_path(std::string&& value) {
  
  local_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.citylife.proto.ProtoIMMessageImage.local_path)
}
inline void ProtoIMMessageImage::set_local_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.citylife.proto.ProtoIMMessageImage.local_path)
}
inline void ProtoIMMessageImage::set_local_path(const char* value, size_t size) {
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.citylife.proto.ProtoIMMessageImage.local_path)
}
inline std::string* ProtoIMMessageImage::_internal_mutable_local_path() {
  
  return local_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoIMMessageImage::release_local_path() {
  // @@protoc_insertion_point(field_release:im.citylife.proto.ProtoIMMessageImage.local_path)
  
  return local_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoIMMessageImage::set_allocated_local_path(std::string* local_path) {
  if (local_path != nullptr) {
    
  } else {
    
  }
  local_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_path);
  // @@protoc_insertion_point(field_set_allocated:im.citylife.proto.ProtoIMMessageImage.local_path)
}

// int32 compress_level = 3;
inline void ProtoIMMessageImage::clear_compress_level() {
  compress_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMMessageImage::_internal_compress_level() const {
  return compress_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMMessageImage::compress_level() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessageImage.compress_level)
  return _internal_compress_level();
}
inline void ProtoIMMessageImage::_internal_set_compress_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  compress_level_ = value;
}
inline void ProtoIMMessageImage::set_compress_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_compress_level(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessageImage.compress_level)
}

// int32 format = 4;
inline void ProtoIMMessageImage::clear_format() {
  format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMMessageImage::_internal_format() const {
  return format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoIMMessageImage::format() const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessageImage.format)
  return _internal_format();
}
inline void ProtoIMMessageImage::_internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  format_ = value;
}
inline void ProtoIMMessageImage::set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:im.citylife.proto.ProtoIMMessageImage.format)
}

// repeated .im.citylife.proto.ProtoIMImage images = 5;
inline int ProtoIMMessageImage::_internal_images_size() const {
  return images_.size();
}
inline int ProtoIMMessageImage::images_size() const {
  return _internal_images_size();
}
inline void ProtoIMMessageImage::clear_images() {
  images_.Clear();
}
inline ::im::citylife::proto::ProtoIMImage* ProtoIMMessageImage::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:im.citylife.proto.ProtoIMMessageImage.images)
  return images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::citylife::proto::ProtoIMImage >*
ProtoIMMessageImage::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:im.citylife.proto.ProtoIMMessageImage.images)
  return &images_;
}
inline const ::im::citylife::proto::ProtoIMImage& ProtoIMMessageImage::_internal_images(int index) const {
  return images_.Get(index);
}
inline const ::im::citylife::proto::ProtoIMImage& ProtoIMMessageImage::images(int index) const {
  // @@protoc_insertion_point(field_get:im.citylife.proto.ProtoIMMessageImage.images)
  return _internal_images(index);
}
inline ::im::citylife::proto::ProtoIMImage* ProtoIMMessageImage::_internal_add_images() {
  return images_.Add();
}
inline ::im::citylife::proto::ProtoIMImage* ProtoIMMessageImage::add_images() {
  // @@protoc_insertion_point(field_add:im.citylife.proto.ProtoIMMessageImage.images)
  return _internal_add_images();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::citylife::proto::ProtoIMImage >&
ProtoIMMessageImage::images() const {
  // @@protoc_insertion_point(field_list:im.citylife.proto.ProtoIMMessageImage.images)
  return images_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace citylife
}  // namespace im

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::im::citylife::proto::ProtoIMMessageStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::im::citylife::proto::ProtoIMMessageStatus>() {
  return ::im::citylife::proto::ProtoIMMessageStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IM_2eproto
